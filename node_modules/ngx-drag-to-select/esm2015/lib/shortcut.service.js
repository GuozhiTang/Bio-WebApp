/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { Injectable, Inject } from '@angular/core';
import { CONFIG } from './tokens';
/** @type {?} */
const SUPPORTED_KEYS = {
    alt: true,
    shift: true,
    meta: true,
    ctrl: true
};
/** @type {?} */
const META_KEY = 'meta';
/** @type {?} */
const KEY_ALIASES = {
    [META_KEY]: ['ctrl', 'meta']
};
/** @type {?} */
const SUPPORTED_SHORTCUTS = {
    disableSelection: true,
    toggleSingleItem: true,
    addToSelection: true,
    removeFromSelection: true
};
/** @type {?} */
const ERROR_PREFIX = '[ShortcutService]';
export class ShortcutService {
    /**
     * @param {?} config
     */
    constructor(config) {
        this.config = config;
        this._shortcuts = {};
        this._shortcuts = this.createShortcutsFromConfig(config.shortcuts);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    disableSelection(event) {
        return this.isShortcutPressed('disableSelection', event);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    toggleSingleItem(event) {
        return this.isShortcutPressed('toggleSingleItem', event);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    addToSelection(event) {
        return this.isShortcutPressed('addToSelection', event);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    removeFromSelection(event) {
        return this.isShortcutPressed('removeFromSelection', event);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    extendedSelectionShortcut(event) {
        return this.addToSelection(event) || this.removeFromSelection(event);
    }
    /**
     * @param {?} shortcuts
     * @return {?}
     */
    createShortcutsFromConfig(shortcuts) {
        /** @type {?} */
        const shortcutMap = {};
        for (const [key, shortcutsForCommand] of Object.entries(shortcuts)) {
            if (!this.isSupportedShortcut(key)) {
                throw new Error(this.getErrorMessage(`Shortcut ${key} not supported`));
            }
            shortcutsForCommand
                .replace(/ /g, '')
                .split(',')
                .forEach(shortcut => {
                if (!shortcutMap[key]) {
                    shortcutMap[key] = [];
                }
                /** @type {?} */
                const combo = shortcut.split('+');
                /** @type {?} */
                const cleanCombos = this.substituteKey(shortcut, combo, META_KEY);
                cleanCombos.forEach(cleanCombo => {
                    /** @type {?} */
                    const unsupportedKey = this.isSupportedCombo(cleanCombo);
                    if (unsupportedKey) {
                        throw new Error(this.getErrorMessage(`Key '${unsupportedKey}' in shortcut ${shortcut} not supported`));
                    }
                    shortcutMap[key].push(cleanCombo.map(comboKey => `${comboKey}Key`));
                });
            });
        }
        return shortcutMap;
    }
    /**
     * @param {?} shortcut
     * @param {?} combo
     * @param {?} substituteKey
     * @return {?}
     */
    substituteKey(shortcut, combo, substituteKey) {
        /** @type {?} */
        const hasSpecialKey = shortcut.includes(substituteKey);
        /** @type {?} */
        const substitutedShortcut = [];
        if (hasSpecialKey) {
            /** @type {?} */
            const cleanShortcut = combo.filter(element => element !== META_KEY);
            KEY_ALIASES.meta.forEach(alias => {
                substitutedShortcut.push([...cleanShortcut, alias]);
            });
        }
        else {
            substitutedShortcut.push(combo);
        }
        return substitutedShortcut;
    }
    /**
     * @param {?} message
     * @return {?}
     */
    getErrorMessage(message) {
        return `${ERROR_PREFIX} ${message}`;
    }
    /**
     * @param {?} shortcutName
     * @param {?} event
     * @return {?}
     */
    isShortcutPressed(shortcutName, event) {
        /** @type {?} */
        const shortcuts = this._shortcuts[shortcutName];
        return shortcuts.some(shortcut => {
            return shortcut.every(key => event[key]);
        });
    }
    /**
     * @param {?} combo
     * @return {?}
     */
    isSupportedCombo(combo) {
        /** @type {?} */
        let unsupportedKey = null;
        combo.forEach(key => {
            if (!SUPPORTED_KEYS[key]) {
                unsupportedKey = key;
                return;
            }
        });
        return unsupportedKey;
    }
    /**
     * @param {?} shortcut
     * @return {?}
     */
    isSupportedShortcut(shortcut) {
        return SUPPORTED_SHORTCUTS[shortcut];
    }
}
ShortcutService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ShortcutService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [CONFIG,] }] }
];
if (false) {
    /** @type {?} */
    ShortcutService.prototype._shortcuts;
    /** @type {?} */
    ShortcutService.prototype.config;
}
//# sourceMappingURL=data:application/json;base64,