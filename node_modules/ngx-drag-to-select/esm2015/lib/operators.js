/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { filter, map, withLatestFrom, distinctUntilChanged } from 'rxjs/operators';
import { getRelativeMousePosition, hasMinimumSize } from './utils';
/** @type {?} */
export const createSelectBox = (container) => (source) => source.pipe(map(([event, opacity, { x, y }]) => {
    // Type annotation is required here, because `getRelativeMousePosition` returns a `MousePosition`,
    // the TS compiler cannot figure out the shape of this type.
    /** @type {?} */
    const mousePosition = getRelativeMousePosition(event, container);
    /** @type {?} */
    const width = opacity > 0 ? mousePosition.x - x : 0;
    /** @type {?} */
    const height = opacity > 0 ? mousePosition.y - y : 0;
    return {
        top: height < 0 ? mousePosition.y : y,
        left: width < 0 ? mousePosition.x : x,
        width: Math.abs(width),
        height: Math.abs(height),
        opacity
    };
}));
/** @type {?} */
export const whenSelectBoxVisible = (selectBox$) => (source) => source.pipe(withLatestFrom(selectBox$), filter(([, selectBox]) => hasMinimumSize(selectBox, 0, 0)), map(([event, _]) => event));
/** @type {?} */
export const distinctKeyEvents = () => (source) => source.pipe(distinctUntilChanged((prev, curr) => {
    return prev.keyCode === curr.keyCode;
}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3BlcmF0b3JzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWRyYWctdG8tc2VsZWN0LyIsInNvdXJjZXMiOlsibGliL29wZXJhdG9ycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQ0EsT0FBTyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsY0FBYyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFbkYsT0FBTyxFQUFFLHdCQUF3QixFQUFFLGNBQWMsRUFBRSxNQUFNLFNBQVMsQ0FBQzs7QUFFbkUsTUFBTSxPQUFPLGVBQWUsR0FBRyxDQUFDLFNBQThCLEVBQUUsRUFBRSxDQUFDLENBQ2pFLE1BQWtDLEVBQ0gsRUFBRSxDQUNqQyxNQUFNLENBQUMsSUFBSSxDQUNULEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Ozs7VUFHM0IsYUFBYSxHQUFrQix3QkFBd0IsQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDOztVQUV6RSxLQUFLLEdBQUcsT0FBTyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7O1VBQzdDLE1BQU0sR0FBRyxPQUFPLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVwRCxPQUFPO1FBQ0wsR0FBRyxFQUFFLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckMsSUFBSSxFQUFFLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckMsS0FBSyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDO1FBQ3RCLE1BQU0sRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQztRQUN4QixPQUFPO0tBQ1IsQ0FBQztBQUNKLENBQUMsQ0FBQyxDQUNIOztBQUVILE1BQU0sT0FBTyxvQkFBb0IsR0FBRyxDQUFDLFVBQXlDLEVBQUUsRUFBRSxDQUFDLENBQUMsTUFBeUIsRUFBRSxFQUFFLENBQy9HLE1BQU0sQ0FBQyxJQUFJLENBQ1QsY0FBYyxDQUFDLFVBQVUsQ0FBQyxFQUMxQixNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLEVBQUUsRUFBRSxDQUFDLGNBQWMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQzFELEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FDM0I7O0FBRUgsTUFBTSxPQUFPLGlCQUFpQixHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsTUFBaUMsRUFBRSxFQUFFLENBQzNFLE1BQU0sQ0FBQyxJQUFJLENBQ1Qsb0JBQW9CLENBQUMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUU7SUFDbEMsT0FBTyxJQUFJLENBQUMsT0FBTyxLQUFLLElBQUksQ0FBQyxPQUFPLENBQUM7QUFDdkMsQ0FBQyxDQUFDLENBQ0giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlLCBwaXBlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBmaWx0ZXIsIG1hcCwgd2l0aExhdGVzdEZyb20sIGRpc3RpbmN0VW50aWxDaGFuZ2VkIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgTW91c2VQb3NpdGlvbiwgU2VsZWN0Qm94LCBTZWxlY3RCb3hJbnB1dCwgU2VsZWN0Q29udGFpbmVySG9zdCB9IGZyb20gJy4vbW9kZWxzJztcbmltcG9ydCB7IGdldFJlbGF0aXZlTW91c2VQb3NpdGlvbiwgaGFzTWluaW11bVNpemUgfSBmcm9tICcuL3V0aWxzJztcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZVNlbGVjdEJveCA9IChjb250YWluZXI6IFNlbGVjdENvbnRhaW5lckhvc3QpID0+IChcbiAgc291cmNlOiBPYnNlcnZhYmxlPFNlbGVjdEJveElucHV0PlxuKTogT2JzZXJ2YWJsZTxTZWxlY3RCb3g8bnVtYmVyPj4gPT5cbiAgc291cmNlLnBpcGUoXG4gICAgbWFwKChbZXZlbnQsIG9wYWNpdHksIHsgeCwgeSB9XSkgPT4ge1xuICAgICAgLy8gVHlwZSBhbm5vdGF0aW9uIGlzIHJlcXVpcmVkIGhlcmUsIGJlY2F1c2UgYGdldFJlbGF0aXZlTW91c2VQb3NpdGlvbmAgcmV0dXJucyBhIGBNb3VzZVBvc2l0aW9uYCxcbiAgICAgIC8vIHRoZSBUUyBjb21waWxlciBjYW5ub3QgZmlndXJlIG91dCB0aGUgc2hhcGUgb2YgdGhpcyB0eXBlLlxuICAgICAgY29uc3QgbW91c2VQb3NpdGlvbjogTW91c2VQb3NpdGlvbiA9IGdldFJlbGF0aXZlTW91c2VQb3NpdGlvbihldmVudCwgY29udGFpbmVyKTtcblxuICAgICAgY29uc3Qgd2lkdGggPSBvcGFjaXR5ID4gMCA/IG1vdXNlUG9zaXRpb24ueCAtIHggOiAwO1xuICAgICAgY29uc3QgaGVpZ2h0ID0gb3BhY2l0eSA+IDAgPyBtb3VzZVBvc2l0aW9uLnkgLSB5IDogMDtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdG9wOiBoZWlnaHQgPCAwID8gbW91c2VQb3NpdGlvbi55IDogeSxcbiAgICAgICAgbGVmdDogd2lkdGggPCAwID8gbW91c2VQb3NpdGlvbi54IDogeCxcbiAgICAgICAgd2lkdGg6IE1hdGguYWJzKHdpZHRoKSxcbiAgICAgICAgaGVpZ2h0OiBNYXRoLmFicyhoZWlnaHQpLFxuICAgICAgICBvcGFjaXR5XG4gICAgICB9O1xuICAgIH0pXG4gICk7XG5cbmV4cG9ydCBjb25zdCB3aGVuU2VsZWN0Qm94VmlzaWJsZSA9IChzZWxlY3RCb3gkOiBPYnNlcnZhYmxlPFNlbGVjdEJveDxudW1iZXI+PikgPT4gKHNvdXJjZTogT2JzZXJ2YWJsZTxFdmVudD4pID0+XG4gIHNvdXJjZS5waXBlKFxuICAgIHdpdGhMYXRlc3RGcm9tKHNlbGVjdEJveCQpLFxuICAgIGZpbHRlcigoWywgc2VsZWN0Qm94XSkgPT4gaGFzTWluaW11bVNpemUoc2VsZWN0Qm94LCAwLCAwKSksXG4gICAgbWFwKChbZXZlbnQsIF9dKSA9PiBldmVudClcbiAgKTtcblxuZXhwb3J0IGNvbnN0IGRpc3RpbmN0S2V5RXZlbnRzID0gKCkgPT4gKHNvdXJjZTogT2JzZXJ2YWJsZTxLZXlib2FyZEV2ZW50PikgPT5cbiAgc291cmNlLnBpcGUoXG4gICAgZGlzdGluY3RVbnRpbENoYW5nZWQoKHByZXYsIGN1cnIpID0+IHtcbiAgICAgIHJldHVybiBwcmV2LmtleUNvZGUgPT09IGN1cnIua2V5Q29kZTtcbiAgICB9KVxuICApO1xuIl19