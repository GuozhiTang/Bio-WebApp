import { InjectionToken, Directive, ElementRef, Inject, Input, PLATFORM_ID, Renderer2, Injectable, Component, Output, EventEmitter, ViewChild, NgZone, ContentChildren, HostBinding, NgModule } from '@angular/core';
import { isPlatformBrowser, CommonModule } from '@angular/common';
import { __values, __read, __spread } from 'tslib';
import { filter, map, withLatestFrom, distinctUntilChanged, switchMap, takeUntil, tap, auditTime, mapTo, share, observeOn, startWith, concatMapTo, first } from 'rxjs/operators';
import { Subject, combineLatest, merge, from, fromEvent, BehaviorSubject, asyncScheduler } from 'rxjs';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/** @type {?} */
var CONFIG = new InjectionToken('DRAG_TO_SELECT_CONFIG');
/** @type {?} */
var USER_CONFIG = new InjectionToken('USER_CONFIG');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/** @type {?} */
var AUDIT_TIME = 16;
/** @type {?} */
var MIN_WIDTH = 5;
/** @type {?} */
var MIN_HEIGHT = 5;
/** @type {?} */
var NO_SELECT_CLASS = 'dts-no-select';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/** @type {?} */
var isObject = function (item) {
    return item && typeof item === 'object' && !Array.isArray(item) && item !== null;
};
/**
 * @param {?} target
 * @param {?} source
 * @return {?}
 */
function mergeDeep(target, source) {
    if (isObject(target) && isObject(source)) {
        Object.keys(source).forEach(function (key) {
            var _a, _b;
            if (isObject(source[key])) {
                if (!target[key]) {
                    Object.assign(target, (_a = {}, _a[key] = {}, _a));
                }
                mergeDeep(target[key], source[key]);
            }
            else {
                Object.assign(target, (_b = {}, _b[key] = source[key], _b));
            }
        });
    }
    return target;
}
/** @type {?} */
var hasMinimumSize = function (selectBox, minWidth, minHeight) {
    if (minWidth === void 0) { minWidth = MIN_WIDTH; }
    if (minHeight === void 0) { minHeight = MIN_HEIGHT; }
    return selectBox.width > minWidth || selectBox.height > minHeight;
};
/** @type {?} */
var clearSelection = function (window) {
    /** @type {?} */
    var selection = window.getSelection();
    if (selection.removeAllRanges) {
        selection.removeAllRanges();
    }
    else if (selection.empty) {
        selection.empty();
    }
};
/** @type {?} */
var inBoundingBox = function (point, box) {
    return (box.left <= point.x && point.x <= box.left + box.width && box.top <= point.y && point.y <= box.top + box.height);
};
/** @type {?} */
var boxIntersects = function (boxA, boxB) {
    return (boxA.left <= boxB.left + boxB.width &&
        boxA.left + boxA.width >= boxB.left &&
        boxA.top <= boxB.top + boxB.height &&
        boxA.top + boxA.height >= boxB.top);
};
/** @type {?} */
var calculateBoundingClientRect = function (element) {
    return element.getBoundingClientRect();
};
/** @type {?} */
var getMousePosition = function (event) {
    return {
        x: event.clientX,
        y: event.clientY
    };
};
/** @type {?} */
var getScroll = function () {
    if (!document || !document.documentElement) {
        return {
            x: 0,
            y: 0
        };
    }
    return {
        x: document.documentElement.scrollLeft || document.body.scrollLeft,
        y: document.documentElement.scrollTop || document.body.scrollTop
    };
};
/** @type {?} */
var getRelativeMousePosition = function (event, container) {
    var _a = getMousePosition(event), clientX = _a.x, clientY = _a.y;
    /** @type {?} */
    var scroll = getScroll();
    /** @type {?} */
    var borderSize = (container.boundingClientRect.width - container.clientWidth) / 2;
    /** @type {?} */
    var offsetLeft = container.boundingClientRect.left + scroll.x;
    /** @type {?} */
    var offsetTop = container.boundingClientRect.top + scroll.y;
    return {
        x: clientX - borderSize - (offsetLeft - window.pageXOffset) + container.scrollLeft,
        y: clientY - borderSize - (offsetTop - window.pageYOffset) + container.scrollTop
    };
};
/** @type {?} */
var cursorWithinElement = function (event, element) {
    /** @type {?} */
    var mousePoint = getMousePosition(event);
    return inBoundingBox(mousePoint, calculateBoundingClientRect(element));
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var SelectItemDirective = /** @class */ (function () {
    function SelectItemDirective(config, platformId, host, renderer) {
        this.config = config;
        this.platformId = platformId;
        this.host = host;
        this.renderer = renderer;
        this.selected = false;
    }
    Object.defineProperty(SelectItemDirective.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this.dtsSelectItem ? this.dtsSelectItem : this;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    SelectItemDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (isPlatformBrowser(this.platformId)) {
            this.calculateBoundingClientRect();
        }
    };
    /**
     * @return {?}
     */
    SelectItemDirective.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        this.applySelectedClass();
    };
    /**
     * @return {?}
     */
    SelectItemDirective.prototype.getBoundingClientRect = /**
     * @return {?}
     */
    function () {
        return this._boundingClientRect;
    };
    /**
     * @return {?}
     */
    SelectItemDirective.prototype.calculateBoundingClientRect = /**
     * @return {?}
     */
    function () {
        this._boundingClientRect = calculateBoundingClientRect(this.host.nativeElement);
    };
    /**
     * @return {?}
     */
    SelectItemDirective.prototype._select = /**
     * @return {?}
     */
    function () {
        this.selected = true;
    };
    /**
     * @return {?}
     */
    SelectItemDirective.prototype._deselect = /**
     * @return {?}
     */
    function () {
        this.selected = false;
    };
    /**
     * @return {?}
     */
    SelectItemDirective.prototype.applySelectedClass = /**
     * @return {?}
     */
    function () {
        if (this.selected) {
            this.renderer.addClass(this.host.nativeElement, this.config.selectedClass);
        }
        else {
            this.renderer.removeClass(this.host.nativeElement, this.config.selectedClass);
        }
    };
    SelectItemDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[dtsSelectItem]',
                    exportAs: 'dtsSelectItem',
                    host: {
                        class: 'dts-select-item'
                    }
                },] }
    ];
    /** @nocollapse */
    SelectItemDirective.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [CONFIG,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    SelectItemDirective.propDecorators = {
        dtsSelectItem: [{ type: Input }]
    };
    return SelectItemDirective;
}());

var _a;
/** @type {?} */
var SUPPORTED_KEYS = {
    alt: true,
    shift: true,
    meta: true,
    ctrl: true
};
/** @type {?} */
var META_KEY = 'meta';
/** @type {?} */
var KEY_ALIASES = (_a = {},
    _a[META_KEY] = ['ctrl', 'meta'],
    _a);
/** @type {?} */
var SUPPORTED_SHORTCUTS = {
    disableSelection: true,
    toggleSingleItem: true,
    addToSelection: true,
    removeFromSelection: true
};
/** @type {?} */
var ERROR_PREFIX = '[ShortcutService]';
var ShortcutService = /** @class */ (function () {
    function ShortcutService(config) {
        this.config = config;
        this._shortcuts = {};
        this._shortcuts = this.createShortcutsFromConfig(config.shortcuts);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    ShortcutService.prototype.disableSelection = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        return this.isShortcutPressed('disableSelection', event);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ShortcutService.prototype.toggleSingleItem = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        return this.isShortcutPressed('toggleSingleItem', event);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ShortcutService.prototype.addToSelection = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        return this.isShortcutPressed('addToSelection', event);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ShortcutService.prototype.removeFromSelection = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        return this.isShortcutPressed('removeFromSelection', event);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ShortcutService.prototype.extendedSelectionShortcut = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        return this.addToSelection(event) || this.removeFromSelection(event);
    };
    /**
     * @param {?} shortcuts
     * @return {?}
     */
    ShortcutService.prototype.createShortcutsFromConfig = /**
     * @param {?} shortcuts
     * @return {?}
     */
    function (shortcuts) {
        var _this = this;
        var e_1, _a;
        /** @type {?} */
        var shortcutMap = {};
        var _loop_1 = function (key, shortcutsForCommand) {
            if (!this_1.isSupportedShortcut(key)) {
                throw new Error(this_1.getErrorMessage("Shortcut " + key + " not supported"));
            }
            shortcutsForCommand
                .replace(/ /g, '')
                .split(',')
                .forEach(function (shortcut) {
                if (!shortcutMap[key]) {
                    shortcutMap[key] = [];
                }
                /** @type {?} */
                var combo = shortcut.split('+');
                /** @type {?} */
                var cleanCombos = _this.substituteKey(shortcut, combo, META_KEY);
                cleanCombos.forEach(function (cleanCombo) {
                    /** @type {?} */
                    var unsupportedKey = _this.isSupportedCombo(cleanCombo);
                    if (unsupportedKey) {
                        throw new Error(_this.getErrorMessage("Key '" + unsupportedKey + "' in shortcut " + shortcut + " not supported"));
                    }
                    shortcutMap[key].push(cleanCombo.map(function (comboKey) { return comboKey + "Key"; }));
                });
            });
        };
        var this_1 = this;
        try {
            for (var _b = __values(Object.entries(shortcuts)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var _d = __read(_c.value, 2), key = _d[0], shortcutsForCommand = _d[1];
                _loop_1(key, shortcutsForCommand);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return shortcutMap;
    };
    /**
     * @param {?} shortcut
     * @param {?} combo
     * @param {?} substituteKey
     * @return {?}
     */
    ShortcutService.prototype.substituteKey = /**
     * @param {?} shortcut
     * @param {?} combo
     * @param {?} substituteKey
     * @return {?}
     */
    function (shortcut, combo, substituteKey) {
        /** @type {?} */
        var hasSpecialKey = shortcut.includes(substituteKey);
        /** @type {?} */
        var substitutedShortcut = [];
        if (hasSpecialKey) {
            /** @type {?} */
            var cleanShortcut_1 = combo.filter(function (element) { return element !== META_KEY; });
            KEY_ALIASES.meta.forEach(function (alias) {
                substitutedShortcut.push(__spread(cleanShortcut_1, [alias]));
            });
        }
        else {
            substitutedShortcut.push(combo);
        }
        return substitutedShortcut;
    };
    /**
     * @param {?} message
     * @return {?}
     */
    ShortcutService.prototype.getErrorMessage = /**
     * @param {?} message
     * @return {?}
     */
    function (message) {
        return ERROR_PREFIX + " " + message;
    };
    /**
     * @param {?} shortcutName
     * @param {?} event
     * @return {?}
     */
    ShortcutService.prototype.isShortcutPressed = /**
     * @param {?} shortcutName
     * @param {?} event
     * @return {?}
     */
    function (shortcutName, event) {
        /** @type {?} */
        var shortcuts = this._shortcuts[shortcutName];
        return shortcuts.some(function (shortcut) {
            return shortcut.every(function (key) { return event[key]; });
        });
    };
    /**
     * @param {?} combo
     * @return {?}
     */
    ShortcutService.prototype.isSupportedCombo = /**
     * @param {?} combo
     * @return {?}
     */
    function (combo) {
        /** @type {?} */
        var unsupportedKey = null;
        combo.forEach(function (key) {
            if (!SUPPORTED_KEYS[key]) {
                unsupportedKey = key;
                return;
            }
        });
        return unsupportedKey;
    };
    /**
     * @param {?} shortcut
     * @return {?}
     */
    ShortcutService.prototype.isSupportedShortcut = /**
     * @param {?} shortcut
     * @return {?}
     */
    function (shortcut) {
        return SUPPORTED_SHORTCUTS[shortcut];
    };
    ShortcutService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ShortcutService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [CONFIG,] }] }
    ]; };
    return ShortcutService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/** @type {?} */
var createSelectBox = function (container) { return function (source) {
    return source.pipe(map(function (_a) {
        var _b = __read(_a, 3), event = _b[0], opacity = _b[1], _c = _b[2], x = _c.x, y = _c.y;
        // Type annotation is required here, because `getRelativeMousePosition` returns a `MousePosition`,
        // the TS compiler cannot figure out the shape of this type.
        /** @type {?} */
        var mousePosition = getRelativeMousePosition(event, container);
        /** @type {?} */
        var width = opacity > 0 ? mousePosition.x - x : 0;
        /** @type {?} */
        var height = opacity > 0 ? mousePosition.y - y : 0;
        return {
            top: height < 0 ? mousePosition.y : y,
            left: width < 0 ? mousePosition.x : x,
            width: Math.abs(width),
            height: Math.abs(height),
            opacity: opacity
        };
    }));
}; };
/** @type {?} */
var whenSelectBoxVisible = function (selectBox$) { return function (source) {
    return source.pipe(withLatestFrom(selectBox$), filter(function (_a) {
        var _b = __read(_a, 2), selectBox = _b[1];
        return hasMinimumSize(selectBox, 0, 0);
    }), map(function (_a) {
        var _b = __read(_a, 2), event = _b[0], _ = _b[1];
        return event;
    }));
}; };
/** @type {?} */
var distinctKeyEvents = function () { return function (source) {
    return source.pipe(distinctUntilChanged(function (prev, curr) {
        return prev.keyCode === curr.keyCode;
    }));
}; };

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/** @enum {number} */
var UpdateActions = {
    Add: 0,
    Remove: 1,
};
UpdateActions[UpdateActions.Add] = 'Add';
UpdateActions[UpdateActions.Remove] = 'Remove';
/** @enum {number} */
var Action = {
    Add: 0,
    Delete: 1,
    None: 2,
};
Action[Action.Add] = 'Add';
Action[Action.Delete] = 'Delete';
Action[Action.None] = 'None';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var SelectContainerComponent = /** @class */ (function () {
    function SelectContainerComponent(platformId, shortcuts, hostElementRef, renderer, ngZone) {
        this.platformId = platformId;
        this.shortcuts = shortcuts;
        this.hostElementRef = hostElementRef;
        this.renderer = renderer;
        this.ngZone = ngZone;
        this.selectOnDrag = true;
        this.disabled = false;
        this.disableDrag = false;
        this.selectMode = false;
        this.selectWithShortcut = false;
        this.custom = false;
        this.selectedItemsChange = new EventEmitter();
        this.select = new EventEmitter();
        this.itemSelected = new EventEmitter();
        this.itemDeselected = new EventEmitter();
        this.selectionStarted = new EventEmitter();
        this.selectionEnded = new EventEmitter();
        this._tmpItems = new Map();
        this._selectedItems$ = new BehaviorSubject([]);
        this.updateItems$ = new Subject();
        this.destroy$ = new Subject();
    }
    /**
     * @return {?}
     */
    SelectContainerComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (isPlatformBrowser(this.platformId)) {
            this.host = this.hostElementRef.nativeElement;
            this._initSelectedItemsChange();
            this._calculateBoundingClientRect();
            this._observeBoundingRectChanges();
            this._observeSelectableItems();
            // distinctKeyEvents is used to prevent multiple key events to be fired repeatedly
            // on Windows when a key is being pressed
            /** @type {?} */
            var keydown$ = fromEvent(window, 'keydown').pipe(distinctKeyEvents(), share());
            /** @type {?} */
            var keyup$ = fromEvent(window, 'keyup').pipe(distinctKeyEvents(), share());
            /** @type {?} */
            var mouseup$_1 = fromEvent(window, 'mouseup').pipe(filter(function () { return !_this.disabled; }), tap(function () { return _this._onMouseUp(); }), share());
            /** @type {?} */
            var mousemove$_1 = fromEvent(window, 'mousemove').pipe(filter(function () { return !_this.disabled; }), share());
            /** @type {?} */
            var mousedown$ = fromEvent(this.host, 'mousedown').pipe(filter(function (event) { return event.button === 0; }), // only emit left mouse
            filter(function () { return !_this.disabled; }), tap(function (event) { return _this._onMouseDown(event); }), share());
            /** @type {?} */
            var dragging$ = mousedown$.pipe(filter(function (event) { return !_this.shortcuts.disableSelection(event); }), filter(function () { return !_this.selectMode; }), filter(function () { return !_this.disableDrag; }), switchMap(function () { return mousemove$_1.pipe(takeUntil(mouseup$_1)); }), share());
            /** @type {?} */
            var currentMousePosition$ = mousedown$.pipe(map(function (event) { return getRelativeMousePosition(event, _this.host); }));
            /** @type {?} */
            var show$ = dragging$.pipe(mapTo(1));
            /** @type {?} */
            var hide$ = mouseup$_1.pipe(mapTo(0));
            /** @type {?} */
            var opacity$ = merge(show$, hide$).pipe(distinctUntilChanged());
            /** @type {?} */
            var selectBox$ = combineLatest(dragging$, opacity$, currentMousePosition$).pipe(createSelectBox(this.host), share());
            this.selectBoxClasses$ = merge(dragging$, mouseup$_1, keydown$, keyup$).pipe(auditTime(AUDIT_TIME), withLatestFrom(selectBox$), map(function (_a) {
                var _b = __read(_a, 2), event = _b[0], selectBox = _b[1];
                return {
                    'dts-adding': hasMinimumSize(selectBox, 0, 0) && !_this.shortcuts.removeFromSelection(event),
                    'dts-removing': _this.shortcuts.removeFromSelection(event)
                };
            }), distinctUntilChanged(function (a, b) { return JSON.stringify(a) === JSON.stringify(b); }));
            /** @type {?} */
            var selectOnMouseUp$ = dragging$.pipe(filter(function () { return !_this.selectOnDrag; }), filter(function () { return !_this.selectMode; }), filter(function (event) { return _this._cursorWithinHost(event); }), switchMap(function (_) { return mouseup$_1.pipe(first()); }), filter(function (event) {
                return (!_this.shortcuts.disableSelection(event) && !_this.shortcuts.toggleSingleItem(event)) ||
                    _this.shortcuts.removeFromSelection(event);
            }));
            /** @type {?} */
            var selectOnDrag$ = selectBox$.pipe(auditTime(AUDIT_TIME), withLatestFrom(mousemove$_1, function (selectBox, event) { return ({
                selectBox: selectBox,
                event: event
            }); }), filter(function () { return _this.selectOnDrag; }), filter(function (_a) {
                var selectBox = _a.selectBox;
                return hasMinimumSize(selectBox);
            }), map(function (_a) {
                var event = _a.event;
                return event;
            }));
            /** @type {?} */
            var selectOnKeyboardEvent$ = merge(keydown$, keyup$).pipe(auditTime(AUDIT_TIME), whenSelectBoxVisible(selectBox$), tap(function (event) {
                if (_this._isExtendedSelection(event)) {
                    _this._tmpItems.clear();
                }
                else {
                    _this._flushItems();
                }
            }));
            merge(selectOnMouseUp$, selectOnDrag$, selectOnKeyboardEvent$)
                .pipe(takeUntil(this.destroy$))
                .subscribe(function (event) { return _this._selectItems(event); });
            this.selectBoxStyles$ = selectBox$.pipe(map(function (selectBox) { return ({
                top: selectBox.top + "px",
                left: selectBox.left + "px",
                width: selectBox.width + "px",
                height: selectBox.height + "px",
                opacity: selectBox.opacity
            }); }));
            this._initSelectionOutputs(mousedown$, mouseup$_1);
        }
    };
    /**
     * @return {?}
     */
    SelectContainerComponent.prototype.selectAll = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.$selectableItems.forEach(function (item) {
            _this._selectItem(item);
        });
    };
    /**
     * @template T
     * @param {?} predicate
     * @return {?}
     */
    SelectContainerComponent.prototype.toggleItems = /**
     * @template T
     * @param {?} predicate
     * @return {?}
     */
    function (predicate) {
        var _this = this;
        this._filterSelectableItems(predicate).subscribe(function (item) { return _this._toggleItem(item); });
    };
    /**
     * @template T
     * @param {?} predicate
     * @return {?}
     */
    SelectContainerComponent.prototype.selectItems = /**
     * @template T
     * @param {?} predicate
     * @return {?}
     */
    function (predicate) {
        var _this = this;
        this._filterSelectableItems(predicate).subscribe(function (item) { return _this._selectItem(item); });
    };
    /**
     * @template T
     * @param {?} predicate
     * @return {?}
     */
    SelectContainerComponent.prototype.deselectItems = /**
     * @template T
     * @param {?} predicate
     * @return {?}
     */
    function (predicate) {
        var _this = this;
        this._filterSelectableItems(predicate).subscribe(function (item) { return _this._deselectItem(item); });
    };
    /**
     * @return {?}
     */
    SelectContainerComponent.prototype.clearSelection = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.$selectableItems.forEach(function (item) {
            _this._deselectItem(item);
        });
    };
    /**
     * @return {?}
     */
    SelectContainerComponent.prototype.update = /**
     * @return {?}
     */
    function () {
        this._calculateBoundingClientRect();
        this.$selectableItems.forEach(function (item) { return item.calculateBoundingClientRect(); });
    };
    /**
     * @return {?}
     */
    SelectContainerComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.destroy$.next();
        this.destroy$.complete();
    };
    /**
     * @template T
     * @param {?} predicate
     * @return {?}
     */
    SelectContainerComponent.prototype._filterSelectableItems = /**
     * @template T
     * @param {?} predicate
     * @return {?}
     */
    function (predicate) {
        // Wrap select items in an observable for better efficiency as
        // no intermediate arrays are created and we only need to process
        // every item once.
        return from(this.$selectableItems.toArray()).pipe(filter(function (item) { return predicate(item.value); }));
    };
    /**
     * @return {?}
     */
    SelectContainerComponent.prototype._initSelectedItemsChange = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this._selectedItems$
            .pipe(auditTime(AUDIT_TIME), takeUntil(this.destroy$))
            .subscribe({
            next: function (selectedItems) {
                _this.selectedItemsChange.emit(selectedItems);
                _this.select.emit(selectedItems);
            },
            complete: function () {
                _this.selectedItemsChange.emit([]);
            }
        });
    };
    /**
     * @return {?}
     */
    SelectContainerComponent.prototype._observeSelectableItems = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // Listen for updates and either select or deselect an item
        this.updateItems$
            .pipe(withLatestFrom(this._selectedItems$), takeUntil(this.destroy$))
            .subscribe(function (_a) {
            var _b = __read(_a, 2), update = _b[0], selectedItems = _b[1];
            /** @type {?} */
            var item = update.item;
            switch (update.type) {
                case UpdateActions.Add:
                    if (_this._addItem(item, selectedItems)) {
                        item._select();
                    }
                    break;
                case UpdateActions.Remove:
                    if (_this._removeItem(item, selectedItems)) {
                        item._deselect();
                    }
                    break;
            }
        });
        // Update the container as well as all selectable items if the list has changed
        this.$selectableItems.changes
            .pipe(withLatestFrom(this._selectedItems$), observeOn(asyncScheduler), takeUntil(this.destroy$))
            .subscribe(function (_a) {
            var _b = __read(_a, 2), items = _b[0], selectedItems = _b[1];
            /** @type {?} */
            var newList = items.toArray();
            /** @type {?} */
            var removedItems = selectedItems.filter(function (item) { return !newList.includes(item.value); });
            if (removedItems.length) {
                removedItems.forEach(function (item) { return _this._removeItem(item, selectedItems); });
            }
            _this.update();
        });
    };
    /**
     * @return {?}
     */
    SelectContainerComponent.prototype._observeBoundingRectChanges = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.ngZone.runOutsideAngular(function () {
            /** @type {?} */
            var resize$ = fromEvent(window, 'resize');
            /** @type {?} */
            var windowScroll$ = fromEvent(window, 'scroll');
            /** @type {?} */
            var containerScroll$ = fromEvent(_this.host, 'scroll');
            merge(resize$, windowScroll$, containerScroll$)
                .pipe(startWith('INITIAL_UPDATE'), auditTime(AUDIT_TIME), takeUntil(_this.destroy$))
                .subscribe(function () {
                _this.update();
            });
        });
    };
    /**
     * @param {?} mousedown$
     * @param {?} mouseup$
     * @return {?}
     */
    SelectContainerComponent.prototype._initSelectionOutputs = /**
     * @param {?} mousedown$
     * @param {?} mouseup$
     * @return {?}
     */
    function (mousedown$, mouseup$) {
        var _this = this;
        mousedown$
            .pipe(filter(function (event) { return _this._cursorWithinHost(event); }), tap(function () { return _this.selectionStarted.emit(); }), concatMapTo(mouseup$.pipe(first())), withLatestFrom(this._selectedItems$), map(function (_a) {
            var _b = __read(_a, 2), items = _b[1];
            return items;
        }), takeUntil(this.destroy$))
            .subscribe(function (items) {
            _this.selectionEnded.emit(items);
        });
    };
    /**
     * @return {?}
     */
    SelectContainerComponent.prototype._calculateBoundingClientRect = /**
     * @return {?}
     */
    function () {
        this.host.boundingClientRect = calculateBoundingClientRect(this.host);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SelectContainerComponent.prototype._cursorWithinHost = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        return cursorWithinElement(event, this.host);
    };
    /**
     * @return {?}
     */
    SelectContainerComponent.prototype._onMouseUp = /**
     * @return {?}
     */
    function () {
        this._flushItems();
        this.renderer.removeClass(document.body, NO_SELECT_CLASS);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SelectContainerComponent.prototype._onMouseDown = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        if (this.shortcuts.disableSelection(event) || this.disabled) {
            return;
        }
        clearSelection(window);
        if (!this.disableDrag) {
            this.renderer.addClass(document.body, NO_SELECT_CLASS);
        }
        /** @type {?} */
        var mousePoint = getMousePosition(event);
        this.$selectableItems.forEach(function (item, index) {
            /** @type {?} */
            var itemRect = item.getBoundingClientRect();
            /** @type {?} */
            var withinBoundingBox = inBoundingBox(mousePoint, itemRect);
            if (_this.shortcuts.extendedSelectionShortcut(event)) {
                return;
            }
            /** @type {?} */
            var shouldAdd = (withinBoundingBox &&
                !_this.shortcuts.toggleSingleItem(event) &&
                !_this.selectMode &&
                !_this.selectWithShortcut) ||
                (withinBoundingBox && _this.shortcuts.toggleSingleItem(event) && !item.selected) ||
                (!withinBoundingBox && _this.shortcuts.toggleSingleItem(event) && item.selected) ||
                (withinBoundingBox && !item.selected && _this.selectMode) ||
                (!withinBoundingBox && item.selected && _this.selectMode);
            /** @type {?} */
            var shouldRemove = (!withinBoundingBox &&
                !_this.shortcuts.toggleSingleItem(event) &&
                !_this.selectMode &&
                !_this.selectWithShortcut) ||
                (!withinBoundingBox && _this.shortcuts.toggleSingleItem(event) && !item.selected) ||
                (withinBoundingBox && _this.shortcuts.toggleSingleItem(event) && item.selected) ||
                (!withinBoundingBox && !item.selected && _this.selectMode) ||
                (withinBoundingBox && item.selected && _this.selectMode);
            if (shouldAdd) {
                _this._selectItem(item);
            }
            else if (shouldRemove) {
                _this._deselectItem(item);
            }
        });
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SelectContainerComponent.prototype._selectItems = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        /** @type {?} */
        var selectionBox = calculateBoundingClientRect(this.$selectBox.nativeElement);
        this.$selectableItems.forEach(function (item) {
            if (_this._isExtendedSelection(event)) {
                _this._extendedSelectionMode(selectionBox, item, event);
            }
            else {
                _this._normalSelectionMode(selectionBox, item, event);
            }
        });
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SelectContainerComponent.prototype._isExtendedSelection = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        return this.shortcuts.extendedSelectionShortcut(event) && this.selectOnDrag;
    };
    /**
     * @param {?} selectBox
     * @param {?} item
     * @param {?} event
     * @return {?}
     */
    SelectContainerComponent.prototype._normalSelectionMode = /**
     * @param {?} selectBox
     * @param {?} item
     * @param {?} event
     * @return {?}
     */
    function (selectBox, item, event) {
        /** @type {?} */
        var inSelection = boxIntersects(selectBox, item.getBoundingClientRect());
        /** @type {?} */
        var shouldAdd = inSelection && !item.selected && !this.shortcuts.removeFromSelection(event);
        /** @type {?} */
        var shouldRemove = (!inSelection && item.selected && !this.shortcuts.addToSelection(event)) ||
            (inSelection && item.selected && this.shortcuts.removeFromSelection(event));
        if (shouldAdd) {
            this._selectItem(item);
        }
        else if (shouldRemove) {
            this._deselectItem(item);
        }
    };
    /**
     * @param {?} selectBox
     * @param {?} item
     * @param {?} event
     * @return {?}
     */
    SelectContainerComponent.prototype._extendedSelectionMode = /**
     * @param {?} selectBox
     * @param {?} item
     * @param {?} event
     * @return {?}
     */
    function (selectBox, item, event) {
        /** @type {?} */
        var inSelection = boxIntersects(selectBox, item.getBoundingClientRect());
        /** @type {?} */
        var shoudlAdd = (inSelection && !item.selected && !this.shortcuts.removeFromSelection(event) && !this._tmpItems.has(item)) ||
            (inSelection && item.selected && this.shortcuts.removeFromSelection(event) && !this._tmpItems.has(item));
        /** @type {?} */
        var shouldRemove = (!inSelection && item.selected && this.shortcuts.addToSelection(event) && this._tmpItems.has(item)) ||
            (!inSelection && !item.selected && this.shortcuts.removeFromSelection(event) && this._tmpItems.has(item));
        if (shoudlAdd) {
            item.selected ? item._deselect() : item._select();
            /** @type {?} */
            var action = this.shortcuts.removeFromSelection(event)
                ? Action.Delete
                : this.shortcuts.addToSelection(event)
                    ? Action.Add
                    : Action.None;
            this._tmpItems.set(item, action);
        }
        else if (shouldRemove) {
            this.shortcuts.removeFromSelection(event) ? item._select() : item._deselect();
            this._tmpItems.delete(item);
        }
    };
    /**
     * @return {?}
     */
    SelectContainerComponent.prototype._flushItems = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this._tmpItems.forEach(function (action, item) {
            if (action === Action.Add) {
                _this._selectItem(item);
            }
            if (action === Action.Delete) {
                _this._deselectItem(item);
            }
        });
        this._tmpItems.clear();
    };
    /**
     * @param {?} item
     * @param {?} selectedItems
     * @return {?}
     */
    SelectContainerComponent.prototype._addItem = /**
     * @param {?} item
     * @param {?} selectedItems
     * @return {?}
     */
    function (item, selectedItems) {
        /** @type {?} */
        var success = false;
        if (!this._hasItem(item, selectedItems)) {
            success = true;
            selectedItems.push(item.value);
            this._selectedItems$.next(selectedItems);
            this.itemSelected.emit(item.value);
        }
        return success;
    };
    /**
     * @param {?} item
     * @param {?} selectedItems
     * @return {?}
     */
    SelectContainerComponent.prototype._removeItem = /**
     * @param {?} item
     * @param {?} selectedItems
     * @return {?}
     */
    function (item, selectedItems) {
        /** @type {?} */
        var success = false;
        /** @type {?} */
        var value = item instanceof SelectItemDirective ? item.value : item;
        /** @type {?} */
        var index = selectedItems.indexOf(value);
        if (index > -1) {
            success = true;
            selectedItems.splice(index, 1);
            this._selectedItems$.next(selectedItems);
            this.itemDeselected.emit(item.value);
        }
        return success;
    };
    /**
     * @param {?} item
     * @return {?}
     */
    SelectContainerComponent.prototype._toggleItem = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (item.selected) {
            this._deselectItem(item);
        }
        else {
            this._selectItem(item);
        }
    };
    /**
     * @param {?} item
     * @return {?}
     */
    SelectContainerComponent.prototype._selectItem = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        this.updateItems$.next({ type: UpdateActions.Add, item: item });
    };
    /**
     * @param {?} item
     * @return {?}
     */
    SelectContainerComponent.prototype._deselectItem = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        this.updateItems$.next({ type: UpdateActions.Remove, item: item });
    };
    /**
     * @param {?} item
     * @param {?} selectedItems
     * @return {?}
     */
    SelectContainerComponent.prototype._hasItem = /**
     * @param {?} item
     * @param {?} selectedItems
     * @return {?}
     */
    function (item, selectedItems) {
        return selectedItems.includes(item.value);
    };
    SelectContainerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'dts-select-container',
                    exportAs: 'dts-select-container',
                    host: {
                        class: 'dts-select-container'
                    },
                    template: "\n    <ng-content></ng-content>\n    <div\n      class=\"dts-select-box\"\n      #selectBox\n      [ngClass]=\"selectBoxClasses$ | async\"\n      [ngStyle]=\"selectBoxStyles$ | async\"\n    ></div>\n  ",
                    styles: [":host{display:block;position:relative}"]
                }] }
    ];
    /** @nocollapse */
    SelectContainerComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
        { type: ShortcutService },
        { type: ElementRef },
        { type: Renderer2 },
        { type: NgZone }
    ]; };
    SelectContainerComponent.propDecorators = {
        $selectBox: [{ type: ViewChild, args: ['selectBox',] }],
        $selectableItems: [{ type: ContentChildren, args: [SelectItemDirective, { descendants: true },] }],
        selectedItems: [{ type: Input }],
        selectOnDrag: [{ type: Input }],
        disabled: [{ type: Input }],
        disableDrag: [{ type: Input }],
        selectMode: [{ type: Input }],
        selectWithShortcut: [{ type: Input }],
        custom: [{ type: Input }, { type: HostBinding, args: ['class.dts-custom',] }],
        selectedItemsChange: [{ type: Output }],
        select: [{ type: Output }],
        itemSelected: [{ type: Output }],
        itemDeselected: [{ type: Output }],
        selectionStarted: [{ type: Output }],
        selectionEnded: [{ type: Output }]
    };
    return SelectContainerComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/** @type {?} */
var DEFAULT_CONFIG = {
    selectedClass: 'selected',
    shortcuts: {
        disableSelection: 'alt',
        toggleSingleItem: 'meta',
        addToSelection: 'shift',
        removeFromSelection: 'shift+meta'
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/** @type {?} */
var COMPONENTS = [SelectContainerComponent, SelectItemDirective];
/**
 * @param {?} config
 * @return {?}
 */
function CONFIG_FACTORY(config) {
    return mergeDeep(DEFAULT_CONFIG, config);
}
var DragToSelectModule = /** @class */ (function () {
    function DragToSelectModule() {
    }
    /**
     * @param {?=} config
     * @return {?}
     */
    DragToSelectModule.forRoot = /**
     * @param {?=} config
     * @return {?}
     */
    function (config) {
        if (config === void 0) { config = {}; }
        return {
            ngModule: DragToSelectModule,
            providers: [
                ShortcutService,
                { provide: USER_CONFIG, useValue: config },
                {
                    provide: CONFIG,
                    useFactory: CONFIG_FACTORY,
                    deps: [USER_CONFIG]
                }
            ]
        };
    };
    DragToSelectModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule],
                    declarations: __spread(COMPONENTS),
                    exports: __spread(COMPONENTS)
                },] }
    ];
    return DragToSelectModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

export { CONFIG_FACTORY, DragToSelectModule, SelectContainerComponent, SelectItemDirective, DEFAULT_CONFIG as ɵb, ShortcutService as ɵf, CONFIG as ɵc, USER_CONFIG as ɵd, mergeDeep as ɵa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,