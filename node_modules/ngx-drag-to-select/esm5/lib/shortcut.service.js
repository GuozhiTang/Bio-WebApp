import * as tslib_1 from "tslib";
var _a;
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { Injectable, Inject } from '@angular/core';
import { CONFIG } from './tokens';
/** @type {?} */
var SUPPORTED_KEYS = {
    alt: true,
    shift: true,
    meta: true,
    ctrl: true
};
/** @type {?} */
var META_KEY = 'meta';
/** @type {?} */
var KEY_ALIASES = (_a = {},
    _a[META_KEY] = ['ctrl', 'meta'],
    _a);
/** @type {?} */
var SUPPORTED_SHORTCUTS = {
    disableSelection: true,
    toggleSingleItem: true,
    addToSelection: true,
    removeFromSelection: true
};
/** @type {?} */
var ERROR_PREFIX = '[ShortcutService]';
var ShortcutService = /** @class */ (function () {
    function ShortcutService(config) {
        this.config = config;
        this._shortcuts = {};
        this._shortcuts = this.createShortcutsFromConfig(config.shortcuts);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    ShortcutService.prototype.disableSelection = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        return this.isShortcutPressed('disableSelection', event);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ShortcutService.prototype.toggleSingleItem = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        return this.isShortcutPressed('toggleSingleItem', event);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ShortcutService.prototype.addToSelection = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        return this.isShortcutPressed('addToSelection', event);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ShortcutService.prototype.removeFromSelection = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        return this.isShortcutPressed('removeFromSelection', event);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ShortcutService.prototype.extendedSelectionShortcut = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        return this.addToSelection(event) || this.removeFromSelection(event);
    };
    /**
     * @param {?} shortcuts
     * @return {?}
     */
    ShortcutService.prototype.createShortcutsFromConfig = /**
     * @param {?} shortcuts
     * @return {?}
     */
    function (shortcuts) {
        var _this = this;
        var e_1, _a;
        /** @type {?} */
        var shortcutMap = {};
        var _loop_1 = function (key, shortcutsForCommand) {
            if (!this_1.isSupportedShortcut(key)) {
                throw new Error(this_1.getErrorMessage("Shortcut " + key + " not supported"));
            }
            shortcutsForCommand
                .replace(/ /g, '')
                .split(',')
                .forEach(function (shortcut) {
                if (!shortcutMap[key]) {
                    shortcutMap[key] = [];
                }
                /** @type {?} */
                var combo = shortcut.split('+');
                /** @type {?} */
                var cleanCombos = _this.substituteKey(shortcut, combo, META_KEY);
                cleanCombos.forEach(function (cleanCombo) {
                    /** @type {?} */
                    var unsupportedKey = _this.isSupportedCombo(cleanCombo);
                    if (unsupportedKey) {
                        throw new Error(_this.getErrorMessage("Key '" + unsupportedKey + "' in shortcut " + shortcut + " not supported"));
                    }
                    shortcutMap[key].push(cleanCombo.map(function (comboKey) { return comboKey + "Key"; }));
                });
            });
        };
        var this_1 = this;
        try {
            for (var _b = tslib_1.__values(Object.entries(shortcuts)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var _d = tslib_1.__read(_c.value, 2), key = _d[0], shortcutsForCommand = _d[1];
                _loop_1(key, shortcutsForCommand);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return shortcutMap;
    };
    /**
     * @param {?} shortcut
     * @param {?} combo
     * @param {?} substituteKey
     * @return {?}
     */
    ShortcutService.prototype.substituteKey = /**
     * @param {?} shortcut
     * @param {?} combo
     * @param {?} substituteKey
     * @return {?}
     */
    function (shortcut, combo, substituteKey) {
        /** @type {?} */
        var hasSpecialKey = shortcut.includes(substituteKey);
        /** @type {?} */
        var substitutedShortcut = [];
        if (hasSpecialKey) {
            /** @type {?} */
            var cleanShortcut_1 = combo.filter(function (element) { return element !== META_KEY; });
            KEY_ALIASES.meta.forEach(function (alias) {
                substitutedShortcut.push(tslib_1.__spread(cleanShortcut_1, [alias]));
            });
        }
        else {
            substitutedShortcut.push(combo);
        }
        return substitutedShortcut;
    };
    /**
     * @param {?} message
     * @return {?}
     */
    ShortcutService.prototype.getErrorMessage = /**
     * @param {?} message
     * @return {?}
     */
    function (message) {
        return ERROR_PREFIX + " " + message;
    };
    /**
     * @param {?} shortcutName
     * @param {?} event
     * @return {?}
     */
    ShortcutService.prototype.isShortcutPressed = /**
     * @param {?} shortcutName
     * @param {?} event
     * @return {?}
     */
    function (shortcutName, event) {
        /** @type {?} */
        var shortcuts = this._shortcuts[shortcutName];
        return shortcuts.some(function (shortcut) {
            return shortcut.every(function (key) { return event[key]; });
        });
    };
    /**
     * @param {?} combo
     * @return {?}
     */
    ShortcutService.prototype.isSupportedCombo = /**
     * @param {?} combo
     * @return {?}
     */
    function (combo) {
        /** @type {?} */
        var unsupportedKey = null;
        combo.forEach(function (key) {
            if (!SUPPORTED_KEYS[key]) {
                unsupportedKey = key;
                return;
            }
        });
        return unsupportedKey;
    };
    /**
     * @param {?} shortcut
     * @return {?}
     */
    ShortcutService.prototype.isSupportedShortcut = /**
     * @param {?} shortcut
     * @return {?}
     */
    function (shortcut) {
        return SUPPORTED_SHORTCUTS[shortcut];
    };
    ShortcutService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ShortcutService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [CONFIG,] }] }
    ]; };
    return ShortcutService;
}());
export { ShortcutService };
if (false) {
    /** @type {?} */
    ShortcutService.prototype._shortcuts;
    /** @type {?} */
    ShortcutService.prototype.config;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hvcnRjdXQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1kcmFnLXRvLXNlbGVjdC8iLCJzb3VyY2VzIjpbImxpYi9zaG9ydGN1dC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRW5ELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxVQUFVLENBQUM7O0lBRTVCLGNBQWMsR0FBRztJQUNyQixHQUFHLEVBQUUsSUFBSTtJQUNULEtBQUssRUFBRSxJQUFJO0lBQ1gsSUFBSSxFQUFFLElBQUk7SUFDVixJQUFJLEVBQUUsSUFBSTtDQUNYOztJQUVLLFFBQVEsR0FBRyxNQUFNOztJQUVqQixXQUFXO0lBQ2YsR0FBQyxRQUFRLElBQUcsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDO09BQzdCOztJQUVLLG1CQUFtQixHQUFHO0lBQzFCLGdCQUFnQixFQUFFLElBQUk7SUFDdEIsZ0JBQWdCLEVBQUUsSUFBSTtJQUN0QixjQUFjLEVBQUUsSUFBSTtJQUNwQixtQkFBbUIsRUFBRSxJQUFJO0NBQzFCOztJQUVLLFlBQVksR0FBRyxtQkFBbUI7QUFFeEM7SUFJRSx5QkFBb0MsTUFBMEI7UUFBMUIsV0FBTSxHQUFOLE1BQU0sQ0FBb0I7UUFGdEQsZUFBVSxHQUFrQyxFQUFFLENBQUM7UUFHckQsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3JFLENBQUM7Ozs7O0lBRUQsMENBQWdCOzs7O0lBQWhCLFVBQWlCLEtBQVk7UUFDM0IsT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUMsa0JBQWtCLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDM0QsQ0FBQzs7Ozs7SUFFRCwwQ0FBZ0I7Ozs7SUFBaEIsVUFBaUIsS0FBWTtRQUMzQixPQUFPLElBQUksQ0FBQyxpQkFBaUIsQ0FB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dGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERyYWdUb1NlbGVjdENvbmZpZyB9IGZyb20gJy4vbW9kZWxzJztcbmltcG9ydCB7IENPTkZJRyB9IGZyb20gJy4vdG9rZW5zJztcblxuY29uc3QgU1VQUE9SVEVEX0tFWVMgPSB7XG4gIGFsdDogdHJ1ZSxcbiAgc2hpZnQ6IHRydWUsXG4gIG1ldGE6IHRydWUsXG4gIGN0cmw6IHRydWVcbn07XG5cbmNvbnN0IE1FVEFfS0VZID0gJ21ldGEnO1xuXG5jb25zdCBLRVlfQUxJQVNFUyA9IHtcbiAgW01FVEFfS0VZXTogWydjdHJsJywgJ21ldGEnXVxufTtcblxuY29uc3QgU1VQUE9SVEVEX1NIT1JUQ1VUUyA9IHtcbiAgZGlzYWJsZVNlbGVjdGlvbjogdHJ1ZSxcbiAgdG9nZ2xlU2luZ2xlSXRlbTogdHJ1ZSxcbiAgYWRkVG9TZWxlY3Rpb246IHRydWUsXG4gIHJlbW92ZUZyb21TZWxlY3Rpb246IHRydWVcbn07XG5cbmNvbnN0IEVSUk9SX1BSRUZJWCA9ICdbU2hvcnRjdXRTZXJ2aWNlXSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBTaG9ydGN1dFNlcnZpY2Uge1xuICBwcml2YXRlIF9zaG9ydGN1dHM6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nW11bXSB9ID0ge307XG5cbiAgY29uc3RydWN0b3IoQEluamVjdChDT05GSUcpIHByaXZhdGUgY29uZmlnOiBEcmFnVG9TZWxlY3RDb25maWcpIHtcbiAgICB0aGlzLl9zaG9ydGN1dHMgPSB0aGlzLmNyZWF0ZVNob3J0Y3V0c0Zyb21Db25maWcoY29uZmlnLnNob3J0Y3V0cyk7XG4gIH1cblxuICBkaXNhYmxlU2VsZWN0aW9uKGV2ZW50OiBFdmVudCkge1xuICAgIHJldHVybiB0aGlzLmlzU2hvcnRjdXRQcmVzc2VkKCdkaXNhYmxlU2VsZWN0aW9uJywgZXZlbnQpO1xuICB9XG5cbiAgdG9nZ2xlU2luZ2xlSXRlbShldmVudDogRXZlbnQpIHtcbiAgICByZXR1cm4gdGhpcy5pc1Nob3J0Y3V0UHJlc3NlZCgndG9nZ2xlU2luZ2xlSXRlbScsIGV2ZW50KTtcbiAgfVxuXG4gIGFkZFRvU2VsZWN0aW9uKGV2ZW50OiBFdmVudCkge1xuICAgIHJldHVybiB0aGlzLmlzU2hvcnRjdXRQcmVzc2VkKCdhZGRUb1NlbGVjdGlvbicsIGV2ZW50KTtcbiAgfVxuXG4gIHJlbW92ZUZyb21TZWxlY3Rpb24oZXZlbnQ6IEV2ZW50KSB7XG4gICAgcmV0dXJuIHRoaXMuaXNTaG9ydGN1dFByZXNzZWQoJ3JlbW92ZUZyb21TZWxlY3Rpb24nLCBldmVudCk7XG4gIH1cblxuICBleHRlbmRlZFNlbGVjdGlvblNob3J0Y3V0KGV2ZW50OiBFdmVudCkge1xuICAgIHJldHVybiB0aGlzLmFkZFRvU2VsZWN0aW9uKGV2ZW50KSB8fCB0aGlzLnJlbW92ZUZyb21TZWxlY3Rpb24oZXZlbnQpO1xuICB9XG5cbiAgcHJpdmF0ZSBjcmVhdGVTaG9ydGN1dHNGcm9tQ29uZmlnKHNob3J0Y3V0czogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfSkge1xuICAgIGNvbnN0IHNob3J0Y3V0TWFwID0ge307XG5cbiAgICBmb3IgKGNvbnN0IFtrZXksIHNob3J0Y3V0c0ZvckNvbW1hbmRdIG9mIE9iamVjdC5lbnRyaWVzKHNob3J0Y3V0cykpIHtcbiAgICAgIGlmICghdGhpcy5pc1N1cHBvcnRlZFNob3J0Y3V0KGtleSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHRoaXMuZ2V0RXJyb3JNZXNzYWdlKGBTaG9ydGN1dCAke2tleX0gbm90IHN1cHBvcnRlZGApKTtcbiAgICAgIH1cblxuICAgICAgc2hvcnRjdXRzRm9yQ29tbWFuZFxuICAgICAgICAucmVwbGFjZSgvIC9nLCAnJylcbiAgICAgICAgLnNwbGl0KCcsJylcbiAgICAgICAgLmZvckVhY2goc2hvcnRjdXQgPT4ge1xuICAgICAgICAgIGlmICghc2hvcnRjdXRNYXBba2V5XSkge1xuICAgICAgICAgICAgc2hvcnRjdXRNYXBba2V5XSA9IFtdO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IGNvbWJvID0gc2hvcnRjdXQuc3BsaXQoJysnKTtcbiAgICAgICAgICBjb25zdCBjbGVhbkNvbWJvcyA9IHRoaXMuc3Vic3RpdHV0ZUtleShzaG9ydGN1dCwgY29tYm8sIE1FVEFfS0VZKTtcblxuICAgICAgICAgIGNsZWFuQ29tYm9zLmZvckVhY2goY2xlYW5Db21ibyA9PiB7XG4gICAgICAgICAgICBjb25zdCB1bnN1cHBvcnRlZEtleSA9IHRoaXMuaXNTdXBwb3J0ZWRDb21ibyhjbGVhbkNvbWJvKTtcblxuICAgICAgICAgICAgaWYgKHVuc3VwcG9ydGVkS2V5KSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcih0aGlzLmdldEVycm9yTWVzc2FnZShgS2V5ICcke3Vuc3VwcG9ydGVkS2V5fScgaW4gc2hvcnRjdXQgJHtzaG9ydGN1dH0gbm90IHN1cHBvcnRlZGApKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc2hvcnRjdXRNYXBba2V5XS5wdXNoKGNsZWFuQ29tYm8ubWFwKGNvbWJvS2V5ID0+IGAke2NvbWJvS2V5fUtleWApKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNob3J0Y3V0TWFwO1xuICB9XG5cbiAgcHJpdmF0ZSBzdWJzdGl0dXRlS2V5KHNob3J0Y3V0OiBzdHJpbmcsIGNvbWJvOiBBcnJheTxzdHJpbmc+LCBzdWJzdGl0dXRlS2V5OiBzdHJpbmcpIHtcbiAgICBjb25zdCBoYXNTcGVjaWFsS2V5ID0gc2hvcnRjdXQuaW5jbHVkZXMoc3Vic3RpdHV0ZUtleSk7XG4gICAgY29uc3Qgc3Vic3RpdHV0ZWRTaG9ydGN1dCA9IFtdO1xuXG4gICAgaWYgKGhhc1NwZWNpYWxLZXkpIHtcbiAgICAgIGNvbnN0IGNsZWFuU2hvcnRjdXQgPSBjb21iby5maWx0ZXIoZWxlbWVudCA9PiBlbGVtZW50ICE9PSBNRVRBX0tFWSk7XG5cbiAgICAgIEtFWV9BTElBU0VTLm1ldGEuZm9yRWFjaChhbGlhcyA9PiB7XG4gICAgICAgIHN1YnN0aXR1dGVkU2hvcnRjdXQucHVzaChbLi4uY2xlYW5TaG9ydGN1dCwgYWxpYXNdKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdWJzdGl0dXRlZFNob3J0Y3V0LnB1c2goY29tYm8pO1xuICAgIH1cblxuICAgIHJldHVybiBzdWJzdGl0dXRlZFNob3J0Y3V0O1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRFcnJvck1lc3NhZ2UobWVzc2FnZTogc3RyaW5nKSB7XG4gICAgcmV0dXJuIGAke0VSUk9SX1BSRUZJWH0gJHttZXNzYWdlfWA7XG4gIH1cblxuICBwcml2YXRlIGlzU2hvcnRjdXRQcmVzc2VkKHNob3J0Y3V0TmFtZTogc3RyaW5nLCBldmVudDogRXZlbnQpIHtcbiAgICBjb25zdCBzaG9ydGN1dHMgPSB0aGlzLl9zaG9ydGN1dHNbc2hvcnRjdXROYW1lXTtcblxuICAgIHJldHVybiBzaG9ydGN1dHMuc29tZShzaG9ydGN1dCA9PiB7XG4gICAgICByZXR1cm4gc2hvcnRjdXQuZXZlcnkoa2V5ID0+IGV2ZW50W2tleV0pO1xuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBpc1N1cHBvcnRlZENvbWJvKGNvbWJvOiBBcnJheTxzdHJpbmc+KSB7XG4gICAgbGV0IHVuc3VwcG9ydGVkS2V5ID0gbnVsbDtcblxuICAgIGNvbWJvLmZvckVhY2goa2V5ID0+IHtcbiAgICAgIGlmICghU1VQUE9SVEVEX0tFWVNba2V5XSkge1xuICAgICAgICB1bnN1cHBvcnRlZEtleSA9IGtleTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHVuc3VwcG9ydGVkS2V5O1xuICB9XG5cbiAgcHJpdmF0ZSBpc1N1cHBvcnRlZFNob3J0Y3V0KHNob3J0Y3V0OiBzdHJpbmcpIHtcbiAgICByZXR1cm4gU1VQUE9SVEVEX1NIT1JUQ1VUU1tzaG9ydGN1dF07XG4gIH1cbn1cbiJdfQ==