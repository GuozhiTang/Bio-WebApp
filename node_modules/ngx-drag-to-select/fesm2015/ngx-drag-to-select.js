import { InjectionToken, Directive, ElementRef, Inject, Input, PLATFORM_ID, Renderer2, Injectable, Component, Output, EventEmitter, ViewChild, NgZone, ContentChildren, HostBinding, NgModule } from '@angular/core';
import { isPlatformBrowser, CommonModule } from '@angular/common';
import { filter, map, withLatestFrom, distinctUntilChanged, switchMap, takeUntil, tap, auditTime, mapTo, share, observeOn, startWith, concatMapTo, first } from 'rxjs/operators';
import { Subject, combineLatest, merge, from, fromEvent, BehaviorSubject, asyncScheduler } from 'rxjs';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/** @type {?} */
const CONFIG = new InjectionToken('DRAG_TO_SELECT_CONFIG');
/** @type {?} */
const USER_CONFIG = new InjectionToken('USER_CONFIG');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/** @type {?} */
const AUDIT_TIME = 16;
/** @type {?} */
const MIN_WIDTH = 5;
/** @type {?} */
const MIN_HEIGHT = 5;
/** @type {?} */
const NO_SELECT_CLASS = 'dts-no-select';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/** @type {?} */
const isObject = (item) => {
    return item && typeof item === 'object' && !Array.isArray(item) && item !== null;
};
/**
 * @param {?} target
 * @param {?} source
 * @return {?}
 */
function mergeDeep(target, source) {
    if (isObject(target) && isObject(source)) {
        Object.keys(source).forEach(key => {
            if (isObject(source[key])) {
                if (!target[key]) {
                    Object.assign(target, { [key]: {} });
                }
                mergeDeep(target[key], source[key]);
            }
            else {
                Object.assign(target, { [key]: source[key] });
            }
        });
    }
    return target;
}
/** @type {?} */
const hasMinimumSize = (selectBox, minWidth = MIN_WIDTH, minHeight = MIN_HEIGHT) => {
    return selectBox.width > minWidth || selectBox.height > minHeight;
};
/** @type {?} */
const clearSelection = (window) => {
    /** @type {?} */
    const selection = window.getSelection();
    if (selection.removeAllRanges) {
        selection.removeAllRanges();
    }
    else if (selection.empty) {
        selection.empty();
    }
};
/** @type {?} */
const inBoundingBox = (point, box) => {
    return (box.left <= point.x && point.x <= box.left + box.width && box.top <= point.y && point.y <= box.top + box.height);
};
/** @type {?} */
const boxIntersects = (boxA, boxB) => {
    return (boxA.left <= boxB.left + boxB.width &&
        boxA.left + boxA.width >= boxB.left &&
        boxA.top <= boxB.top + boxB.height &&
        boxA.top + boxA.height >= boxB.top);
};
/** @type {?} */
const calculateBoundingClientRect = (element) => {
    return element.getBoundingClientRect();
};
/** @type {?} */
const getMousePosition = (event) => {
    return {
        x: event.clientX,
        y: event.clientY
    };
};
/** @type {?} */
const getScroll = () => {
    if (!document || !document.documentElement) {
        return {
            x: 0,
            y: 0
        };
    }
    return {
        x: document.documentElement.scrollLeft || document.body.scrollLeft,
        y: document.documentElement.scrollTop || document.body.scrollTop
    };
};
/** @type {?} */
const getRelativeMousePosition = (event, container) => {
    const { x: clientX, y: clientY } = getMousePosition(event);
    /** @type {?} */
    const scroll = getScroll();
    /** @type {?} */
    const borderSize = (container.boundingClientRect.width - container.clientWidth) / 2;
    /** @type {?} */
    const offsetLeft = container.boundingClientRect.left + scroll.x;
    /** @type {?} */
    const offsetTop = container.boundingClientRect.top + scroll.y;
    return {
        x: clientX - borderSize - (offsetLeft - window.pageXOffset) + container.scrollLeft,
        y: clientY - borderSize - (offsetTop - window.pageYOffset) + container.scrollTop
    };
};
/** @type {?} */
const cursorWithinElement = (event, element) => {
    /** @type {?} */
    const mousePoint = getMousePosition(event);
    return inBoundingBox(mousePoint, calculateBoundingClientRect(element));
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class SelectItemDirective {
    /**
     * @param {?} config
     * @param {?} platformId
     * @param {?} host
     * @param {?} renderer
     */
    constructor(config, platformId, host, renderer) {
        this.config = config;
        this.platformId = platformId;
        this.host = host;
        this.renderer = renderer;
        this.selected = false;
    }
    /**
     * @return {?}
     */
    get value() {
        return this.dtsSelectItem ? this.dtsSelectItem : this;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (isPlatformBrowser(this.platformId)) {
            this.calculateBoundingClientRect();
        }
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        this.applySelectedClass();
    }
    /**
     * @return {?}
     */
    getBoundingClientRect() {
        return this._boundingClientRect;
    }
    /**
     * @return {?}
     */
    calculateBoundingClientRect() {
        this._boundingClientRect = calculateBoundingClientRect(this.host.nativeElement);
    }
    /**
     * @return {?}
     */
    _select() {
        this.selected = true;
    }
    /**
     * @return {?}
     */
    _deselect() {
        this.selected = false;
    }
    /**
     * @return {?}
     */
    applySelectedClass() {
        if (this.selected) {
            this.renderer.addClass(this.host.nativeElement, this.config.selectedClass);
        }
        else {
            this.renderer.removeClass(this.host.nativeElement, this.config.selectedClass);
        }
    }
}
SelectItemDirective.decorators = [
    { type: Directive, args: [{
                selector: '[dtsSelectItem]',
                exportAs: 'dtsSelectItem',
                host: {
                    class: 'dts-select-item'
                }
            },] }
];
/** @nocollapse */
SelectItemDirective.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [CONFIG,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: ElementRef },
    { type: Renderer2 }
];
SelectItemDirective.propDecorators = {
    dtsSelectItem: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/** @type {?} */
const SUPPORTED_KEYS = {
    alt: true,
    shift: true,
    meta: true,
    ctrl: true
};
/** @type {?} */
const META_KEY = 'meta';
/** @type {?} */
const KEY_ALIASES = {
    [META_KEY]: ['ctrl', 'meta']
};
/** @type {?} */
const SUPPORTED_SHORTCUTS = {
    disableSelection: true,
    toggleSingleItem: true,
    addToSelection: true,
    removeFromSelection: true
};
/** @type {?} */
const ERROR_PREFIX = '[ShortcutService]';
class ShortcutService {
    /**
     * @param {?} config
     */
    constructor(config) {
        this.config = config;
        this._shortcuts = {};
        this._shortcuts = this.createShortcutsFromConfig(config.shortcuts);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    disableSelection(event) {
        return this.isShortcutPressed('disableSelection', event);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    toggleSingleItem(event) {
        return this.isShortcutPressed('toggleSingleItem', event);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    addToSelection(event) {
        return this.isShortcutPressed('addToSelection', event);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    removeFromSelection(event) {
        return this.isShortcutPressed('removeFromSelection', event);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    extendedSelectionShortcut(event) {
        return this.addToSelection(event) || this.removeFromSelection(event);
    }
    /**
     * @param {?} shortcuts
     * @return {?}
     */
    createShortcutsFromConfig(shortcuts) {
        /** @type {?} */
        const shortcutMap = {};
        for (const [key, shortcutsForCommand] of Object.entries(shortcuts)) {
            if (!this.isSupportedShortcut(key)) {
                throw new Error(this.getErrorMessage(`Shortcut ${key} not supported`));
            }
            shortcutsForCommand
                .replace(/ /g, '')
                .split(',')
                .forEach(shortcut => {
                if (!shortcutMap[key]) {
                    shortcutMap[key] = [];
                }
                /** @type {?} */
                const combo = shortcut.split('+');
                /** @type {?} */
                const cleanCombos = this.substituteKey(shortcut, combo, META_KEY);
                cleanCombos.forEach(cleanCombo => {
                    /** @type {?} */
                    const unsupportedKey = this.isSupportedCombo(cleanCombo);
                    if (unsupportedKey) {
                        throw new Error(this.getErrorMessage(`Key '${unsupportedKey}' in shortcut ${shortcut} not supported`));
                    }
                    shortcutMap[key].push(cleanCombo.map(comboKey => `${comboKey}Key`));
                });
            });
        }
        return shortcutMap;
    }
    /**
     * @param {?} shortcut
     * @param {?} combo
     * @param {?} substituteKey
     * @return {?}
     */
    substituteKey(shortcut, combo, substituteKey) {
        /** @type {?} */
        const hasSpecialKey = shortcut.includes(substituteKey);
        /** @type {?} */
        const substitutedShortcut = [];
        if (hasSpecialKey) {
            /** @type {?} */
            const cleanShortcut = combo.filter(element => element !== META_KEY);
            KEY_ALIASES.meta.forEach(alias => {
                substitutedShortcut.push([...cleanShortcut, alias]);
            });
        }
        else {
            substitutedShortcut.push(combo);
        }
        return substitutedShortcut;
    }
    /**
     * @param {?} message
     * @return {?}
     */
    getErrorMessage(message) {
        return `${ERROR_PREFIX} ${message}`;
    }
    /**
     * @param {?} shortcutName
     * @param {?} event
     * @return {?}
     */
    isShortcutPressed(shortcutName, event) {
        /** @type {?} */
        const shortcuts = this._shortcuts[shortcutName];
        return shortcuts.some(shortcut => {
            return shortcut.every(key => event[key]);
        });
    }
    /**
     * @param {?} combo
     * @return {?}
     */
    isSupportedCombo(combo) {
        /** @type {?} */
        let unsupportedKey = null;
        combo.forEach(key => {
            if (!SUPPORTED_KEYS[key]) {
                unsupportedKey = key;
                return;
            }
        });
        return unsupportedKey;
    }
    /**
     * @param {?} shortcut
     * @return {?}
     */
    isSupportedShortcut(shortcut) {
        return SUPPORTED_SHORTCUTS[shortcut];
    }
}
ShortcutService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ShortcutService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [CONFIG,] }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/** @type {?} */
const createSelectBox = (container) => (source) => source.pipe(map(([event, opacity, { x, y }]) => {
    // Type annotation is required here, because `getRelativeMousePosition` returns a `MousePosition`,
    // the TS compiler cannot figure out the shape of this type.
    /** @type {?} */
    const mousePosition = getRelativeMousePosition(event, container);
    /** @type {?} */
    const width = opacity > 0 ? mousePosition.x - x : 0;
    /** @type {?} */
    const height = opacity > 0 ? mousePosition.y - y : 0;
    return {
        top: height < 0 ? mousePosition.y : y,
        left: width < 0 ? mousePosition.x : x,
        width: Math.abs(width),
        height: Math.abs(height),
        opacity
    };
}));
/** @type {?} */
const whenSelectBoxVisible = (selectBox$) => (source) => source.pipe(withLatestFrom(selectBox$), filter(([, selectBox]) => hasMinimumSize(selectBox, 0, 0)), map(([event, _]) => event));
/** @type {?} */
const distinctKeyEvents = () => (source) => source.pipe(distinctUntilChanged((prev, curr) => {
    return prev.keyCode === curr.keyCode;
}));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/** @enum {number} */
const UpdateActions = {
    Add: 0,
    Remove: 1,
};
UpdateActions[UpdateActions.Add] = 'Add';
UpdateActions[UpdateActions.Remove] = 'Remove';
/** @enum {number} */
const Action = {
    Add: 0,
    Delete: 1,
    None: 2,
};
Action[Action.Add] = 'Add';
Action[Action.Delete] = 'Delete';
Action[Action.None] = 'None';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class SelectContainerComponent {
    /**
     * @param {?} platformId
     * @param {?} shortcuts
     * @param {?} hostElementRef
     * @param {?} renderer
     * @param {?} ngZone
     */
    constructor(platformId, shortcuts, hostElementRef, renderer, ngZone) {
        this.platformId = platformId;
        this.shortcuts = shortcuts;
        this.hostElementRef = hostElementRef;
        this.renderer = renderer;
        this.ngZone = ngZone;
        this.selectOnDrag = true;
        this.disabled = false;
        this.disableDrag = false;
        this.selectMode = false;
        this.selectWithShortcut = false;
        this.custom = false;
        this.selectedItemsChange = new EventEmitter();
        this.select = new EventEmitter();
        this.itemSelected = new EventEmitter();
        this.itemDeselected = new EventEmitter();
        this.selectionStarted = new EventEmitter();
        this.selectionEnded = new EventEmitter();
        this._tmpItems = new Map();
        this._selectedItems$ = new BehaviorSubject([]);
        this.updateItems$ = new Subject();
        this.destroy$ = new Subject();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (isPlatformBrowser(this.platformId)) {
            this.host = this.hostElementRef.nativeElement;
            this._initSelectedItemsChange();
            this._calculateBoundingClientRect();
            this._observeBoundingRectChanges();
            this._observeSelectableItems();
            // distinctKeyEvents is used to prevent multiple key events to be fired repeatedly
            // on Windows when a key is being pressed
            /** @type {?} */
            const keydown$ = fromEvent(window, 'keydown').pipe(distinctKeyEvents(), share());
            /** @type {?} */
            const keyup$ = fromEvent(window, 'keyup').pipe(distinctKeyEvents(), share());
            /** @type {?} */
            const mouseup$ = fromEvent(window, 'mouseup').pipe(filter(() => !this.disabled), tap(() => this._onMouseUp()), share());
            /** @type {?} */
            const mousemove$ = fromEvent(window, 'mousemove').pipe(filter(() => !this.disabled), share());
            /** @type {?} */
            const mousedown$ = fromEvent(this.host, 'mousedown').pipe(filter(event => event.button === 0), // only emit left mouse
            filter(() => !this.disabled), tap(event => this._onMouseDown(event)), share());
            /** @type {?} */
            const dragging$ = mousedown$.pipe(filter(event => !this.shortcuts.disableSelection(event)), filter(() => !this.selectMode), filter(() => !this.disableDrag), switchMap(() => mousemove$.pipe(takeUntil(mouseup$))), share());
            /** @type {?} */
            const currentMousePosition$ = mousedown$.pipe(map((event) => getRelativeMousePosition(event, this.host)));
            /** @type {?} */
            const show$ = dragging$.pipe(mapTo(1));
            /** @type {?} */
            const hide$ = mouseup$.pipe(mapTo(0));
            /** @type {?} */
            const opacity$ = merge(show$, hide$).pipe(distinctUntilChanged());
            /** @type {?} */
            const selectBox$ = combineLatest(dragging$, opacity$, currentMousePosition$).pipe(createSelectBox(this.host), share());
            this.selectBoxClasses$ = merge(dragging$, mouseup$, keydown$, keyup$).pipe(auditTime(AUDIT_TIME), withLatestFrom(selectBox$), map(([event, selectBox]) => {
                return {
                    'dts-adding': hasMinimumSize(selectBox, 0, 0) && !this.shortcuts.removeFromSelection(event),
                    'dts-removing': this.shortcuts.removeFromSelection(event)
                };
            }), distinctUntilChanged((a, b) => JSON.stringify(a) === JSON.stringify(b)));
            /** @type {?} */
            const selectOnMouseUp$ = dragging$.pipe(filter(() => !this.selectOnDrag), filter(() => !this.selectMode), filter(event => this._cursorWithinHost(event)), switchMap(_ => mouseup$.pipe(first())), filter(event => (!this.shortcuts.disableSelection(event) && !this.shortcuts.toggleSingleItem(event)) ||
                this.shortcuts.removeFromSelection(event)));
            /** @type {?} */
            const selectOnDrag$ = selectBox$.pipe(auditTime(AUDIT_TIME), withLatestFrom(mousemove$, (selectBox, event) => ({
                selectBox,
                event
            })), filter(() => this.selectOnDrag), filter(({ selectBox }) => hasMinimumSize(selectBox)), map(({ event }) => event));
            /** @type {?} */
            const selectOnKeyboardEvent$ = merge(keydown$, keyup$).pipe(auditTime(AUDIT_TIME), whenSelectBoxVisible(selectBox$), tap(event => {
                if (this._isExtendedSelection(event)) {
                    this._tmpItems.clear();
                }
                else {
                    this._flushItems();
                }
            }));
            merge(selectOnMouseUp$, selectOnDrag$, selectOnKeyboardEvent$)
                .pipe(takeUntil(this.destroy$))
                .subscribe(event => this._selectItems(event));
            this.selectBoxStyles$ = selectBox$.pipe(map(selectBox => ({
                top: `${selectBox.top}px`,
                left: `${selectBox.left}px`,
                width: `${selectBox.width}px`,
                height: `${selectBox.height}px`,
                opacity: selectBox.opacity
            })));
            this._initSelectionOutputs(mousedown$, mouseup$);
        }
    }
    /**
     * @return {?}
     */
    selectAll() {
        this.$selectableItems.forEach(item => {
            this._selectItem(item);
        });
    }
    /**
     * @template T
     * @param {?} predicate
     * @return {?}
     */
    toggleItems(predicate) {
        this._filterSelectableItems(predicate).subscribe((item) => this._toggleItem(item));
    }
    /**
     * @template T
     * @param {?} predicate
     * @return {?}
     */
    selectItems(predicate) {
        this._filterSelectableItems(predicate).subscribe((item) => this._selectItem(item));
    }
    /**
     * @template T
     * @param {?} predicate
     * @return {?}
     */
    deselectItems(predicate) {
        this._filterSelectableItems(predicate).subscribe((item) => this._deselectItem(item));
    }
    /**
     * @return {?}
     */
    clearSelection() {
        this.$selectableItems.forEach(item => {
            this._deselectItem(item);
        });
    }
    /**
     * @return {?}
     */
    update() {
        this._calculateBoundingClientRect();
        this.$selectableItems.forEach(item => item.calculateBoundingClientRect());
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    /**
     * @template T
     * @param {?} predicate
     * @return {?}
     */
    _filterSelectableItems(predicate) {
        // Wrap select items in an observable for better efficiency as
        // no intermediate arrays are created and we only need to process
        // every item once.
        return from(this.$selectableItems.toArray()).pipe(filter(item => predicate(item.value)));
    }
    /**
     * @return {?}
     */
    _initSelectedItemsChange() {
        this._selectedItems$
            .pipe(auditTime(AUDIT_TIME), takeUntil(this.destroy$))
            .subscribe({
            next: selectedItems => {
                this.selectedItemsChange.emit(selectedItems);
                this.select.emit(selectedItems);
            },
            complete: () => {
                this.selectedItemsChange.emit([]);
            }
        });
    }
    /**
     * @return {?}
     */
    _observeSelectableItems() {
        // Listen for updates and either select or deselect an item
        this.updateItems$
            .pipe(withLatestFrom(this._selectedItems$), takeUntil(this.destroy$))
            .subscribe(([update, selectedItems]) => {
            /** @type {?} */
            const item = update.item;
            switch (update.type) {
                case UpdateActions.Add:
                    if (this._addItem(item, selectedItems)) {
                        item._select();
                    }
                    break;
                case UpdateActions.Remove:
                    if (this._removeItem(item, selectedItems)) {
                        item._deselect();
                    }
                    break;
            }
        });
        // Update the container as well as all selectable items if the list has changed
        this.$selectableItems.changes
            .pipe(withLatestFrom(this._selectedItems$), observeOn(asyncScheduler), takeUntil(this.destroy$))
            .subscribe(([items, selectedItems]) => {
            /** @type {?} */
            const newList = items.toArray();
            /** @type {?} */
            const removedItems = selectedItems.filter(item => !newList.includes(item.value));
            if (removedItems.length) {
                removedItems.forEach(item => this._removeItem(item, selectedItems));
            }
            this.update();
        });
    }
    /**
     * @return {?}
     */
    _observeBoundingRectChanges() {
        this.ngZone.runOutsideAngular(() => {
            /** @type {?} */
            const resize$ = fromEvent(window, 'resize');
            /** @type {?} */
            const windowScroll$ = fromEvent(window, 'scroll');
            /** @type {?} */
            const containerScroll$ = fromEvent(this.host, 'scroll');
            merge(resize$, windowScroll$, containerScroll$)
                .pipe(startWith('INITIAL_UPDATE'), auditTime(AUDIT_TIME), takeUntil(this.destroy$))
                .subscribe(() => {
                this.update();
            });
        });
    }
    /**
     * @param {?} mousedown$
     * @param {?} mouseup$
     * @return {?}
     */
    _initSelectionOutputs(mousedown$, mouseup$) {
        mousedown$
            .pipe(filter(event => this._cursorWithinHost(event)), tap(() => this.selectionStarted.emit()), concatMapTo(mouseup$.pipe(first())), withLatestFrom(this._selectedItems$), map(([, items]) => items), takeUntil(this.destroy$))
            .subscribe(items => {
            this.selectionEnded.emit(items);
        });
    }
    /**
     * @return {?}
     */
    _calculateBoundingClientRect() {
        this.host.boundingClientRect = calculateBoundingClientRect(this.host);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    _cursorWithinHost(event) {
        return cursorWithinElement(event, this.host);
    }
    /**
     * @return {?}
     */
    _onMouseUp() {
        this._flushItems();
        this.renderer.removeClass(document.body, NO_SELECT_CLASS);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    _onMouseDown(event) {
        if (this.shortcuts.disableSelection(event) || this.disabled) {
            return;
        }
        clearSelection(window);
        if (!this.disableDrag) {
            this.renderer.addClass(document.body, NO_SELECT_CLASS);
        }
        /** @type {?} */
        const mousePoint = getMousePosition(event);
        this.$selectableItems.forEach((item, index) => {
            /** @type {?} */
            const itemRect = item.getBoundingClientRect();
            /** @type {?} */
            const withinBoundingBox = inBoundingBox(mousePoint, itemRect);
            if (this.shortcuts.extendedSelectionShortcut(event)) {
                return;
            }
            /** @type {?} */
            const shouldAdd = (withinBoundingBox &&
                !this.shortcuts.toggleSingleItem(event) &&
                !this.selectMode &&
                !this.selectWithShortcut) ||
                (withinBoundingBox && this.shortcuts.toggleSingleItem(event) && !item.selected) ||
                (!withinBoundingBox && this.shortcuts.toggleSingleItem(event) && item.selected) ||
                (withinBoundingBox && !item.selected && this.selectMode) ||
                (!withinBoundingBox && item.selected && this.selectMode);
            /** @type {?} */
            const shouldRemove = (!withinBoundingBox &&
                !this.shortcuts.toggleSingleItem(event) &&
                !this.selectMode &&
                !this.selectWithShortcut) ||
                (!withinBoundingBox && this.shortcuts.toggleSingleItem(event) && !item.selected) ||
                (withinBoundingBox && this.shortcuts.toggleSingleItem(event) && item.selected) ||
                (!withinBoundingBox && !item.selected && this.selectMode) ||
                (withinBoundingBox && item.selected && this.selectMode);
            if (shouldAdd) {
                this._selectItem(item);
            }
            else if (shouldRemove) {
                this._deselectItem(item);
            }
        });
    }
    /**
     * @param {?} event
     * @return {?}
     */
    _selectItems(event) {
        /** @type {?} */
        const selectionBox = calculateBoundingClientRect(this.$selectBox.nativeElement);
        this.$selectableItems.forEach(item => {
            if (this._isExtendedSelection(event)) {
                this._extendedSelectionMode(selectionBox, item, event);
            }
            else {
                this._normalSelectionMode(selectionBox, item, event);
            }
        });
    }
    /**
     * @param {?} event
     * @return {?}
     */
    _isExtendedSelection(event) {
        return this.shortcuts.extendedSelectionShortcut(event) && this.selectOnDrag;
    }
    /**
     * @param {?} selectBox
     * @param {?} item
     * @param {?} event
     * @return {?}
     */
    _normalSelectionMode(selectBox, item, event) {
        /** @type {?} */
        const inSelection = boxIntersects(selectBox, item.getBoundingClientRect());
        /** @type {?} */
        const shouldAdd = inSelection && !item.selected && !this.shortcuts.removeFromSelection(event);
        /** @type {?} */
        const shouldRemove = (!inSelection && item.selected && !this.shortcuts.addToSelection(event)) ||
            (inSelection && item.selected && this.shortcuts.removeFromSelection(event));
        if (shouldAdd) {
            this._selectItem(item);
        }
        else if (shouldRemove) {
            this._deselectItem(item);
        }
    }
    /**
     * @param {?} selectBox
     * @param {?} item
     * @param {?} event
     * @return {?}
     */
    _extendedSelectionMode(selectBox, item, event) {
        /** @type {?} */
        const inSelection = boxIntersects(selectBox, item.getBoundingClientRect());
        /** @type {?} */
        const shoudlAdd = (inSelection && !item.selected && !this.shortcuts.removeFromSelection(event) && !this._tmpItems.has(item)) ||
            (inSelection && item.selected && this.shortcuts.removeFromSelection(event) && !this._tmpItems.has(item));
        /** @type {?} */
        const shouldRemove = (!inSelection && item.selected && this.shortcuts.addToSelection(event) && this._tmpItems.has(item)) ||
            (!inSelection && !item.selected && this.shortcuts.removeFromSelection(event) && this._tmpItems.has(item));
        if (shoudlAdd) {
            item.selected ? item._deselect() : item._select();
            /** @type {?} */
            const action = this.shortcuts.removeFromSelection(event)
                ? Action.Delete
                : this.shortcuts.addToSelection(event)
                    ? Action.Add
                    : Action.None;
            this._tmpItems.set(item, action);
        }
        else if (shouldRemove) {
            this.shortcuts.removeFromSelection(event) ? item._select() : item._deselect();
            this._tmpItems.delete(item);
        }
    }
    /**
     * @return {?}
     */
    _flushItems() {
        this._tmpItems.forEach((action, item) => {
            if (action === Action.Add) {
                this._selectItem(item);
            }
            if (action === Action.Delete) {
                this._deselectItem(item);
            }
        });
        this._tmpItems.clear();
    }
    /**
     * @param {?} item
     * @param {?} selectedItems
     * @return {?}
     */
    _addItem(item, selectedItems) {
        /** @type {?} */
        let success = false;
        if (!this._hasItem(item, selectedItems)) {
            success = true;
            selectedItems.push(item.value);
            this._selectedItems$.next(selectedItems);
            this.itemSelected.emit(item.value);
        }
        return success;
    }
    /**
     * @param {?} item
     * @param {?} selectedItems
     * @return {?}
     */
    _removeItem(item, selectedItems) {
        /** @type {?} */
        let success = false;
        /** @type {?} */
        const value = item instanceof SelectItemDirective ? item.value : item;
        /** @type {?} */
        const index = selectedItems.indexOf(value);
        if (index > -1) {
            success = true;
            selectedItems.splice(index, 1);
            this._selectedItems$.next(selectedItems);
            this.itemDeselected.emit(item.value);
        }
        return success;
    }
    /**
     * @param {?} item
     * @return {?}
     */
    _toggleItem(item) {
        if (item.selected) {
            this._deselectItem(item);
        }
        else {
            this._selectItem(item);
        }
    }
    /**
     * @param {?} item
     * @return {?}
     */
    _selectItem(item) {
        this.updateItems$.next({ type: UpdateActions.Add, item });
    }
    /**
     * @param {?} item
     * @return {?}
     */
    _deselectItem(item) {
        this.updateItems$.next({ type: UpdateActions.Remove, item });
    }
    /**
     * @param {?} item
     * @param {?} selectedItems
     * @return {?}
     */
    _hasItem(item, selectedItems) {
        return selectedItems.includes(item.value);
    }
}
SelectContainerComponent.decorators = [
    { type: Component, args: [{
                selector: 'dts-select-container',
                exportAs: 'dts-select-container',
                host: {
                    class: 'dts-select-container'
                },
                template: `
    <ng-content></ng-content>
    <div
      class="dts-select-box"
      #selectBox
      [ngClass]="selectBoxClasses$ | async"
      [ngStyle]="selectBoxStyles$ | async"
    ></div>
  `,
                styles: [":host{display:block;position:relative}"]
            }] }
];
/** @nocollapse */
SelectContainerComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: ShortcutService },
    { type: ElementRef },
    { type: Renderer2 },
    { type: NgZone }
];
SelectContainerComponent.propDecorators = {
    $selectBox: [{ type: ViewChild, args: ['selectBox',] }],
    $selectableItems: [{ type: ContentChildren, args: [SelectItemDirective, { descendants: true },] }],
    selectedItems: [{ type: Input }],
    selectOnDrag: [{ type: Input }],
    disabled: [{ type: Input }],
    disableDrag: [{ type: Input }],
    selectMode: [{ type: Input }],
    selectWithShortcut: [{ type: Input }],
    custom: [{ type: Input }, { type: HostBinding, args: ['class.dts-custom',] }],
    selectedItemsChange: [{ type: Output }],
    select: [{ type: Output }],
    itemSelected: [{ type: Output }],
    itemDeselected: [{ type: Output }],
    selectionStarted: [{ type: Output }],
    selectionEnded: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/** @type {?} */
const DEFAULT_CONFIG = {
    selectedClass: 'selected',
    shortcuts: {
        disableSelection: 'alt',
        toggleSingleItem: 'meta',
        addToSelection: 'shift',
        removeFromSelection: 'shift+meta'
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/** @type {?} */
const COMPONENTS = [SelectContainerComponent, SelectItemDirective];
/**
 * @param {?} config
 * @return {?}
 */
function CONFIG_FACTORY(config) {
    return mergeDeep(DEFAULT_CONFIG, config);
}
class DragToSelectModule {
    /**
     * @param {?=} config
     * @return {?}
     */
    static forRoot(config = {}) {
        return {
            ngModule: DragToSelectModule,
            providers: [
                ShortcutService,
                { provide: USER_CONFIG, useValue: config },
                {
                    provide: CONFIG,
                    useFactory: CONFIG_FACTORY,
                    deps: [USER_CONFIG]
                }
            ]
        };
    }
}
DragToSelectModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [...COMPONENTS],
                exports: [...COMPONENTS]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

export { CONFIG_FACTORY, DragToSelectModule, SelectContainerComponent, SelectItemDirective, DEFAULT_CONFIG as ɵb, ShortcutService as ɵf, CONFIG as ɵc, USER_CONFIG as ɵd, mergeDeep as ɵa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWRyYWctdG8tc2VsZWN0LmpzLm1hcCIsInNvdXJjZXMiOlsibmc6Ly9uZ3gtZHJhZy10by1zZWxlY3QvbGliL3Rva2Vucy50cyIsIm5nOi8vbmd4LWRyYWctdG8tc2VsZWN0L2xpYi9jb25zdGFudHMudHMiLCJuZzovL25neC1kcmFnLXRvLXNlbGVjdC9saWIvdXRpbHMudHMiLCJuZzovL25neC1kcmFnLXRvLXNlbGVjdC9saWIvc2VsZWN0LWl0ZW0uZGlyZWN0aXZlLnRzIiwibmc6Ly9uZ3gtZHJhZy10by1zZWxlY3QvbGliL3Nob3J0Y3V0LnNlcnZpY2UudHMiLCJuZzovL25neC1kcmFnLXRvLXNlbGVjdC9saWIvb3BlcmF0b3JzLnRzIiwibmc6Ly9uZ3gtZHJhZy10by1zZWxlY3QvbGliL21vZGVscy50cyIsIm5nOi8vbmd4LWRyYWctdG8tc2VsZWN0L2xpYi9zZWxlY3QtY29udGFpbmVyLmNvbXBvbmVudC50cyIsIm5nOi8vbmd4LWRyYWctdG8tc2VsZWN0L2xpYi9jb25maWcudHMiLCJuZzovL25neC1kcmFnLXRvLXNlbGVjdC9saWIvZHJhZy10by1zZWxlY3QubW9kdWxlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGlvblRva2VuIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEcmFnVG9TZWxlY3RDb25maWcgfSBmcm9tICcuL21vZGVscyc7XG5cbmV4cG9ydCBjb25zdCBDT05GSUcgPSBuZXcgSW5qZWN0aW9uVG9rZW48RHJhZ1RvU2VsZWN0Q29uZmlnPignRFJBR19UT19TRUxFQ1RfQ09ORklHJyk7XG5leHBvcnQgY29uc3QgVVNFUl9DT05GSUcgPSBuZXcgSW5qZWN0aW9uVG9rZW48RHJhZ1RvU2VsZWN0Q29uZmlnPignVVNFUl9DT05GSUcnKTtcbiIsImV4cG9ydCBjb25zdCBBVURJVF9USU1FID0gMTY7XG5leHBvcnQgY29uc3QgTUlOX1dJRFRIID0gNTtcbmV4cG9ydCBjb25zdCBNSU5fSEVJR0hUID0gNTtcbmV4cG9ydCBjb25zdCBOT19TRUxFQ1RfQ0xBU1MgPSAnZHRzLW5vLXNlbGVjdCc7XG4iLCJpbXBvcnQgeyBNSU5fSEVJR0hULCBNSU5fV0lEVEggfSBmcm9tICcuL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBCb3VuZGluZ0JveCwgTW91c2VQb3NpdGlvbiwgU2VsZWN0Qm94LCBTZWxlY3RDb250YWluZXJIb3N0IH0gZnJvbSAnLi9tb2RlbHMnO1xuXG5leHBvcnQgY29uc3QgaXNPYmplY3QgPSAoaXRlbTogYW55KSA9PiB7XG4gIHJldHVybiBpdGVtICYmIHR5cGVvZiBpdGVtID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShpdGVtKSAmJiBpdGVtICE9PSBudWxsO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlRGVlcCh0YXJnZXQ6IE9iamVjdCwgc291cmNlOiBPYmplY3QpIHtcbiAgaWYgKGlzT2JqZWN0KHRhcmdldCkgJiYgaXNPYmplY3Qoc291cmNlKSkge1xuICAgIE9iamVjdC5rZXlzKHNvdXJjZSkuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgaWYgKGlzT2JqZWN0KHNvdXJjZVtrZXldKSkge1xuICAgICAgICBpZiAoIXRhcmdldFtrZXldKSB7XG4gICAgICAgICAgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHsgW2tleV06IHt9IH0pO1xuICAgICAgICB9XG4gICAgICAgIG1lcmdlRGVlcCh0YXJnZXRba2V5XSwgc291cmNlW2tleV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHsgW2tleV06IHNvdXJjZVtrZXldIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuZXhwb3J0IGNvbnN0IGhhc01pbmltdW1TaXplID0gKHNlbGVjdEJveDogU2VsZWN0Qm94PG51bWJlcj4sIG1pbldpZHRoID0gTUlOX1dJRFRILCBtaW5IZWlnaHQgPSBNSU5fSEVJR0hUKSA9PiB7XG4gIHJldHVybiBzZWxlY3RCb3gud2lkdGggPiBtaW5XaWR0aCB8fCBzZWxlY3RCb3guaGVpZ2h0ID4gbWluSGVpZ2h0O1xufTtcblxuZXhwb3J0IGNvbnN0IGNsZWFyU2VsZWN0aW9uID0gKHdpbmRvdzogV2luZG93KSA9PiB7XG4gIGNvbnN0IHNlbGVjdGlvbiA9IHdpbmRvdy5nZXRTZWxlY3Rpb24oKTtcblxuICBpZiAoc2VsZWN0aW9uLnJlbW92ZUFsbFJhbmdlcykge1xuICAgIHNlbGVjdGlvbi5yZW1vdmVBbGxSYW5nZXMoKTtcbiAgfSBlbHNlIGlmIChzZWxlY3Rpb24uZW1wdHkpIHtcbiAgICBzZWxlY3Rpb24uZW1wdHkoKTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IGluQm91bmRpbmdCb3ggPSAocG9pbnQ6IE1vdXNlUG9zaXRpb24sIGJveDogQm91bmRpbmdCb3gpID0+IHtcbiAgcmV0dXJuIChcbiAgICBib3gubGVmdCA8PSBwb2ludC54ICYmIHBvaW50LnggPD0gYm94LmxlZnQgKyBib3gud2lkdGggJiYgYm94LnRvcCA8PSBwb2ludC55ICYmIHBvaW50LnkgPD0gYm94LnRvcCArIGJveC5oZWlnaHRcbiAgKTtcbn07XG5cbmV4cG9ydCBjb25zdCBib3hJbnRlcnNlY3RzID0gKGJveEE6IEJvdW5kaW5nQm94LCBib3hCOiBCb3VuZGluZ0JveCkgPT4ge1xuICByZXR1cm4gKFxuICAgIGJveEEubGVmdCA8PSBib3hCLmxlZnQgKyBib3hCLndpZHRoICYmXG4gICAgYm94QS5sZWZ0ICsgYm94QS53aWR0aCA+PSBib3hCLmxlZnQgJiZcbiAgICBib3hBLnRvcCA8PSBib3hCLnRvcCArIGJveEIuaGVpZ2h0ICYmXG4gICAgYm94QS50b3AgKyBib3hBLmhlaWdodCA+PSBib3hCLnRvcFxuICApO1xufTtcblxuZXhwb3J0IGNvbnN0IGNhbGN1bGF0ZUJvdW5kaW5nQ2xpZW50UmVjdCA9IChlbGVtZW50OiBIVE1MRWxlbWVudCk6IEJvdW5kaW5nQm94ID0+IHtcbiAgcmV0dXJuIGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0TW91c2VQb3NpdGlvbiA9IChldmVudDogTW91c2VFdmVudCkgPT4ge1xuICByZXR1cm4ge1xuICAgIHg6IGV2ZW50LmNsaWVudFgsXG4gICAgeTogZXZlbnQuY2xpZW50WVxuICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IGdldFNjcm9sbCA9ICgpID0+IHtcbiAgaWYgKCFkb2N1bWVudCB8fCAhZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IDAsXG4gICAgICB5OiAwXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgeDogZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbExlZnQgfHwgZG9jdW1lbnQuYm9keS5zY3JvbGxMZWZ0LFxuICAgIHk6IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3AgfHwgZG9jdW1lbnQuYm9keS5zY3JvbGxUb3BcbiAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRSZWxhdGl2ZU1vdXNlUG9zaXRpb24gPSAoZXZlbnQ6IE1vdXNlRXZlbnQsIGNvbnRhaW5lcjogU2VsZWN0Q29udGFpbmVySG9zdCk6IE1vdXNlUG9zaXRpb24gPT4ge1xuICBjb25zdCB7IHg6IGNsaWVudFgsIHk6IGNsaWVudFkgfSA9IGdldE1vdXNlUG9zaXRpb24oZXZlbnQpO1xuICBjb25zdCBzY3JvbGwgPSBnZXRTY3JvbGwoKTtcblxuICBjb25zdCBib3JkZXJTaXplID0gKGNvbnRhaW5lci5ib3VuZGluZ0NsaWVudFJlY3Qud2lkdGggLSBjb250YWluZXIuY2xpZW50V2lkdGgpIC8gMjtcbiAgY29uc3Qgb2Zmc2V0TGVmdCA9IGNvbnRhaW5lci5ib3VuZGluZ0NsaWVudFJlY3QubGVmdCArIHNjcm9sbC54O1xuICBjb25zdCBvZmZzZXRUb3AgPSBjb250YWluZXIuYm91bmRpbmdDbGllbnRSZWN0LnRvcCArIHNjcm9sbC55O1xuXG4gIHJldHVybiB7XG4gICAgeDogY2xpZW50WCAtIGJvcmRlclNpemUgLSAob2Zmc2V0TGVmdCAtIHdpbmRvdy5wYWdlWE9mZnNldCkgKyBjb250YWluZXIuc2Nyb2xsTGVmdCxcbiAgICB5OiBjbGllbnRZIC0gYm9yZGVyU2l6ZSAtIChvZmZzZXRUb3AgLSB3aW5kb3cucGFnZVlPZmZzZXQpICsgY29udGFpbmVyLnNjcm9sbFRvcFxuICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IGN1cnNvcldpdGhpbkVsZW1lbnQgPSAoZXZlbnQ6IE1vdXNlRXZlbnQsIGVsZW1lbnQ6IEhUTUxFbGVtZW50KSA9PiB7XG4gIGNvbnN0IG1vdXNlUG9pbnQgPSBnZXRNb3VzZVBvc2l0aW9uKGV2ZW50KTtcbiAgcmV0dXJuIGluQm91bmRpbmdCb3gobW91c2VQb2ludCwgY2FsY3VsYXRlQm91bmRpbmdDbGllbnRSZWN0KGVsZW1lbnQpKTtcbn07XG4iLCJpbXBvcnQgeyBpc1BsYXRmb3JtQnJvd3NlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbmltcG9ydCB7XG4gIERpcmVjdGl2ZSxcbiAgRG9DaGVjayxcbiAgRWxlbWVudFJlZixcbiAgRXZlbnRFbWl0dGVyLFxuICBJbmplY3QsXG4gIElucHV0LFxuICBPbkluaXQsXG4gIE91dHB1dCxcbiAgUExBVEZPUk1fSUQsXG4gIFJlbmRlcmVyMlxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgRHJhZ1RvU2VsZWN0Q29uZmlnIH0gZnJvbSAnLi9tb2RlbHMnO1xuaW1wb3J0IHsgQ09ORklHIH0gZnJvbSAnLi90b2tlbnMnO1xuaW1wb3J0IHsgY2FsY3VsYXRlQm91bmRpbmdDbGllbnRSZWN0IH0gZnJvbSAnLi91dGlscyc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tkdHNTZWxlY3RJdGVtXScsXG4gIGV4cG9ydEFzOiAnZHRzU2VsZWN0SXRlbScsXG4gIGhvc3Q6IHtcbiAgICBjbGFzczogJ2R0cy1zZWxlY3QtaXRlbSdcbiAgfVxufSlcbmV4cG9ydCBjbGFzcyBTZWxlY3RJdGVtRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBEb0NoZWNrIHtcbiAgcHJpdmF0ZSBfYm91bmRpbmdDbGllbnRSZWN0O1xuXG4gIHNlbGVjdGVkID0gZmFsc2U7XG5cbiAgQElucHV0KClcbiAgZHRzU2VsZWN0SXRlbTtcblxuICBnZXQgdmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZHRzU2VsZWN0SXRlbSA/IHRoaXMuZHRzU2VsZWN0SXRlbSA6IHRoaXM7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBASW5qZWN0KENPTkZJRykgcHJpdmF0ZSBjb25maWc6IERyYWdUb1NlbGVjdENvbmZpZyxcbiAgICBASW5qZWN0KFBMQVRGT1JNX0lEKSBwcml2YXRlIHBsYXRmb3JtSWQsXG4gICAgcHJpdmF0ZSBob3N0OiBFbGVtZW50UmVmLFxuICAgIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMlxuICApIHt9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgaWYgKGlzUGxhdGZvcm1Ccm93c2VyKHRoaXMucGxhdGZvcm1JZCkpIHtcbiAgICAgIHRoaXMuY2FsY3VsYXRlQm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgfVxuICB9XG5cbiAgbmdEb0NoZWNrKCkge1xuICAgIHRoaXMuYXBwbHlTZWxlY3RlZENsYXNzKCk7XG4gIH1cblxuICBnZXRCb3VuZGluZ0NsaWVudFJlY3QoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2JvdW5kaW5nQ2xpZW50UmVjdDtcbiAgfVxuXG4gIGNhbGN1bGF0ZUJvdW5kaW5nQ2xpZW50UmVjdCgpIHtcbiAgICB0aGlzLl9ib3VuZGluZ0NsaWVudFJlY3QgPSBjYWxjdWxhdGVCb3VuZGluZ0NsaWVudFJlY3QodGhpcy5ob3N0Lm5hdGl2ZUVsZW1lbnQpO1xuICB9XG5cbiAgX3NlbGVjdCgpIHtcbiAgICB0aGlzLnNlbGVjdGVkID0gdHJ1ZTtcbiAgfVxuXG4gIF9kZXNlbGVjdCgpIHtcbiAgICB0aGlzLnNlbGVjdGVkID0gZmFsc2U7XG4gIH1cblxuICBwcml2YXRlIGFwcGx5U2VsZWN0ZWRDbGFzcygpIHtcbiAgICBpZiAodGhpcy5zZWxlY3RlZCkge1xuICAgICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyh0aGlzLmhvc3QubmF0aXZlRWxlbWVudCwgdGhpcy5jb25maWcuc2VsZWN0ZWRDbGFzcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlQ2xhc3ModGhpcy5ob3N0Lm5hdGl2ZUVsZW1lbnQsIHRoaXMuY29uZmlnLnNlbGVjdGVkQ2xhc3MpO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEcmFnVG9TZWxlY3RDb25maWcgfSBmcm9tICcuL21vZGVscyc7XG5pbXBvcnQgeyBDT05GSUcgfSBmcm9tICcuL3Rva2Vucyc7XG5cbmNvbnN0IFNVUFBPUlRFRF9LRVlTID0ge1xuICBhbHQ6IHRydWUsXG4gIHNoaWZ0OiB0cnVlLFxuICBtZXRhOiB0cnVlLFxuICBjdHJsOiB0cnVlXG59O1xuXG5jb25zdCBNRVRBX0tFWSA9ICdtZXRhJztcblxuY29uc3QgS0VZX0FMSUFTRVMgPSB7XG4gIFtNRVRBX0tFWV06IFsnY3RybCcsICdtZXRhJ11cbn07XG5cbmNvbnN0IFNVUFBPUlRFRF9TSE9SVENVVFMgPSB7XG4gIGRpc2FibGVTZWxlY3Rpb246IHRydWUsXG4gIHRvZ2dsZVNpbmdsZUl0ZW06IHRydWUsXG4gIGFkZFRvU2VsZWN0aW9uOiB0cnVlLFxuICByZW1vdmVGcm9tU2VsZWN0aW9uOiB0cnVlXG59O1xuXG5jb25zdCBFUlJPUl9QUkVGSVggPSAnW1Nob3J0Y3V0U2VydmljZV0nO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgU2hvcnRjdXRTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBfc2hvcnRjdXRzOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZ1tdW10gfSA9IHt9O1xuXG4gIGNvbnN0cnVjdG9yKEBJbmplY3QoQ09ORklHKSBwcml2YXRlIGNvbmZpZzogRHJhZ1RvU2VsZWN0Q29uZmlnKSB7XG4gICAgdGhpcy5fc2hvcnRjdXRzID0gdGhpcy5jcmVhdGVTaG9ydGN1dHNGcm9tQ29uZmlnKGNvbmZpZy5zaG9ydGN1dHMpO1xuICB9XG5cbiAgZGlzYWJsZVNlbGVjdGlvbihldmVudDogRXZlbnQpIHtcbiAgICByZXR1cm4gdGhpcy5pc1Nob3J0Y3V0UHJlc3NlZCgnZGlzYWJsZVNlbGVjdGlvbicsIGV2ZW50KTtcbiAgfVxuXG4gIHRvZ2dsZVNpbmdsZUl0ZW0oZXZlbnQ6IEV2ZW50KSB7XG4gICAgcmV0dXJuIHRoaXMuaXNTaG9ydGN1dFByZXNzZWQoJ3RvZ2dsZVNpbmdsZUl0ZW0nLCBldmVudCk7XG4gIH1cblxuICBhZGRUb1NlbGVjdGlvbihldmVudDogRXZlbnQpIHtcbiAgICByZXR1cm4gdGhpcy5pc1Nob3J0Y3V0UHJlc3NlZCgnYWRkVG9TZWxlY3Rpb24nLCBldmVudCk7XG4gIH1cblxuICByZW1vdmVGcm9tU2VsZWN0aW9uKGV2ZW50OiBFdmVudCkge1xuICAgIHJldHVybiB0aGlzLmlzU2hvcnRjdXRQcmVzc2VkKCdyZW1vdmVGcm9tU2VsZWN0aW9uJywgZXZlbnQpO1xuICB9XG5cbiAgZXh0ZW5kZWRTZWxlY3Rpb25TaG9ydGN1dChldmVudDogRXZlbnQpIHtcbiAgICByZXR1cm4gdGhpcy5hZGRUb1NlbGVjdGlvbihldmVudCkgfHwgdGhpcy5yZW1vdmVGcm9tU2VsZWN0aW9uKGV2ZW50KTtcbiAgfVxuXG4gIHByaXZhdGUgY3JlYXRlU2hvcnRjdXRzRnJvbUNvbmZpZyhzaG9ydGN1dHM6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH0pIHtcbiAgICBjb25zdCBzaG9ydGN1dE1hcCA9IHt9O1xuXG4gICAgZm9yIChjb25zdCBba2V5LCBzaG9ydGN1dHNGb3JDb21tYW5kXSBvZiBPYmplY3QuZW50cmllcyhzaG9ydGN1dHMpKSB7XG4gICAgICBpZiAoIXRoaXMuaXNTdXBwb3J0ZWRTaG9ydGN1dChrZXkpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcih0aGlzLmdldEVycm9yTWVzc2FnZShgU2hvcnRjdXQgJHtrZXl9IG5vdCBzdXBwb3J0ZWRgKSk7XG4gICAgICB9XG5cbiAgICAgIHNob3J0Y3V0c0ZvckNvbW1hbmRcbiAgICAgICAgLnJlcGxhY2UoLyAvZywgJycpXG4gICAgICAgIC5zcGxpdCgnLCcpXG4gICAgICAgIC5mb3JFYWNoKHNob3J0Y3V0ID0+IHtcbiAgICAgICAgICBpZiAoIXNob3J0Y3V0TWFwW2tleV0pIHtcbiAgICAgICAgICAgIHNob3J0Y3V0TWFwW2tleV0gPSBbXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBjb21ibyA9IHNob3J0Y3V0LnNwbGl0KCcrJyk7XG4gICAgICAgICAgY29uc3QgY2xlYW5Db21ib3MgPSB0aGlzLnN1YnN0aXR1dGVLZXkoc2hvcnRjdXQsIGNvbWJvLCBNRVRBX0tFWSk7XG5cbiAgICAgICAgICBjbGVhbkNvbWJvcy5mb3JFYWNoKGNsZWFuQ29tYm8gPT4ge1xuICAgICAgICAgICAgY29uc3QgdW5zdXBwb3J0ZWRLZXkgPSB0aGlzLmlzU3VwcG9ydGVkQ29tYm8oY2xlYW5Db21ibyk7XG5cbiAgICAgICAgICAgIGlmICh1bnN1cHBvcnRlZEtleSkge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IodGhpcy5nZXRFcnJvck1lc3NhZ2UoYEtleSAnJHt1bnN1cHBvcnRlZEtleX0nIGluIHNob3J0Y3V0ICR7c2hvcnRjdXR9IG5vdCBzdXBwb3J0ZWRgKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHNob3J0Y3V0TWFwW2tleV0ucHVzaChjbGVhbkNvbWJvLm1hcChjb21ib0tleSA9PiBgJHtjb21ib0tleX1LZXlgKSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBzaG9ydGN1dE1hcDtcbiAgfVxuXG4gIHByaXZhdGUgc3Vic3RpdHV0ZUtleShzaG9ydGN1dDogc3RyaW5nLCBjb21ibzogQXJyYXk8c3RyaW5nPiwgc3Vic3RpdHV0ZUtleTogc3RyaW5nKSB7XG4gICAgY29uc3QgaGFzU3BlY2lhbEtleSA9IHNob3J0Y3V0LmluY2x1ZGVzKHN1YnN0aXR1dGVLZXkpO1xuICAgIGNvbnN0IHN1YnN0aXR1dGVkU2hvcnRjdXQgPSBbXTtcblxuICAgIGlmIChoYXNTcGVjaWFsS2V5KSB7XG4gICAgICBjb25zdCBjbGVhblNob3J0Y3V0ID0gY29tYm8uZmlsdGVyKGVsZW1lbnQgPT4gZWxlbWVudCAhPT0gTUVUQV9LRVkpO1xuXG4gICAgICBLRVlfQUxJQVNFUy5tZXRhLmZvckVhY2goYWxpYXMgPT4ge1xuICAgICAgICBzdWJzdGl0dXRlZFNob3J0Y3V0LnB1c2goWy4uLmNsZWFuU2hvcnRjdXQsIGFsaWFzXSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3Vic3RpdHV0ZWRTaG9ydGN1dC5wdXNoKGNvbWJvKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3Vic3RpdHV0ZWRTaG9ydGN1dDtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0RXJyb3JNZXNzYWdlKG1lc3NhZ2U6IHN0cmluZykge1xuICAgIHJldHVybiBgJHtFUlJPUl9QUkVGSVh9ICR7bWVzc2FnZX1gO1xuICB9XG5cbiAgcHJpdmF0ZSBpc1Nob3J0Y3V0UHJlc3NlZChzaG9ydGN1dE5hbWU6IHN0cmluZywgZXZlbnQ6IEV2ZW50KSB7XG4gICAgY29uc3Qgc2hvcnRjdXRzID0gdGhpcy5fc2hvcnRjdXRzW3Nob3J0Y3V0TmFtZV07XG5cbiAgICByZXR1cm4gc2hvcnRjdXRzLnNvbWUoc2hvcnRjdXQgPT4ge1xuICAgICAgcmV0dXJuIHNob3J0Y3V0LmV2ZXJ5KGtleSA9PiBldmVudFtrZXldKTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgaXNTdXBwb3J0ZWRDb21ibyhjb21ibzogQXJyYXk8c3RyaW5nPikge1xuICAgIGxldCB1bnN1cHBvcnRlZEtleSA9IG51bGw7XG5cbiAgICBjb21iby5mb3JFYWNoKGtleSA9PiB7XG4gICAgICBpZiAoIVNVUFBPUlRFRF9LRVlTW2tleV0pIHtcbiAgICAgICAgdW5zdXBwb3J0ZWRLZXkgPSBrZXk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiB1bnN1cHBvcnRlZEtleTtcbiAgfVxuXG4gIHByaXZhdGUgaXNTdXBwb3J0ZWRTaG9ydGN1dChzaG9ydGN1dDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIFNVUFBPUlRFRF9TSE9SVENVVFNbc2hvcnRjdXRdO1xuICB9XG59XG4iLCJpbXBvcnQgeyBPYnNlcnZhYmxlLCBwaXBlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBmaWx0ZXIsIG1hcCwgd2l0aExhdGVzdEZyb20sIGRpc3RpbmN0VW50aWxDaGFuZ2VkIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgTW91c2VQb3NpdGlvbiwgU2VsZWN0Qm94LCBTZWxlY3RCb3hJbnB1dCwgU2VsZWN0Q29udGFpbmVySG9zdCB9IGZyb20gJy4vbW9kZWxzJztcbmltcG9ydCB7IGdldFJlbGF0aXZlTW91c2VQb3NpdGlvbiwgaGFzTWluaW11bVNpemUgfSBmcm9tICcuL3V0aWxzJztcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZVNlbGVjdEJveCA9IChjb250YWluZXI6IFNlbGVjdENvbnRhaW5lckhvc3QpID0+IChcbiAgc291cmNlOiBPYnNlcnZhYmxlPFNlbGVjdEJveElucHV0PlxuKTogT2JzZXJ2YWJsZTxTZWxlY3RCb3g8bnVtYmVyPj4gPT5cbiAgc291cmNlLnBpcGUoXG4gICAgbWFwKChbZXZlbnQsIG9wYWNpdHksIHsgeCwgeSB9XSkgPT4ge1xuICAgICAgLy8gVHlwZSBhbm5vdGF0aW9uIGlzIHJlcXVpcmVkIGhlcmUsIGJlY2F1c2UgYGdldFJlbGF0aXZlTW91c2VQb3NpdGlvbmAgcmV0dXJucyBhIGBNb3VzZVBvc2l0aW9uYCxcbiAgICAgIC8vIHRoZSBUUyBjb21waWxlciBjYW5ub3QgZmlndXJlIG91dCB0aGUgc2hhcGUgb2YgdGhpcyB0eXBlLlxuICAgICAgY29uc3QgbW91c2VQb3NpdGlvbjogTW91c2VQb3NpdGlvbiA9IGdldFJlbGF0aXZlTW91c2VQb3NpdGlvbihldmVudCwgY29udGFpbmVyKTtcblxuICAgICAgY29uc3Qgd2lkdGggPSBvcGFjaXR5ID4gMCA/IG1vdXNlUG9zaXRpb24ueCAtIHggOiAwO1xuICAgICAgY29uc3QgaGVpZ2h0ID0gb3BhY2l0eSA+IDAgPyBtb3VzZVBvc2l0aW9uLnkgLSB5IDogMDtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdG9wOiBoZWlnaHQgPCAwID8gbW91c2VQb3NpdGlvbi55IDogeSxcbiAgICAgICAgbGVmdDogd2lkdGggPCAwID8gbW91c2VQb3NpdGlvbi54IDogeCxcbiAgICAgICAgd2lkdGg6IE1hdGguYWJzKHdpZHRoKSxcbiAgICAgICAgaGVpZ2h0OiBNYXRoLmFicyhoZWlnaHQpLFxuICAgICAgICBvcGFjaXR5XG4gICAgICB9O1xuICAgIH0pXG4gICk7XG5cbmV4cG9ydCBjb25zdCB3aGVuU2VsZWN0Qm94VmlzaWJsZSA9IChzZWxlY3RCb3gkOiBPYnNlcnZhYmxlPFNlbGVjdEJveDxudW1iZXI+PikgPT4gKHNvdXJjZTogT2JzZXJ2YWJsZTxFdmVudD4pID0+XG4gIHNvdXJjZS5waXBlKFxuICAgIHdpdGhMYXRlc3RGcm9tKHNlbGVjdEJveCQpLFxuICAgIGZpbHRlcigoWywgc2VsZWN0Qm94XSkgPT4gaGFzTWluaW11bVNpemUoc2VsZWN0Qm94LCAwLCAwKSksXG4gICAgbWFwKChbZXZlbnQsIF9dKSA9PiBldmVudClcbiAgKTtcblxuZXhwb3J0IGNvbnN0IGRpc3RpbmN0S2V5RXZlbnRzID0gKCkgPT4gKHNvdXJjZTogT2JzZXJ2YWJsZTxLZXlib2FyZEV2ZW50PikgPT5cbiAgc291cmNlLnBpcGUoXG4gICAgZGlzdGluY3RVbnRpbENoYW5nZWQoKHByZXYsIGN1cnIpID0+IHtcbiAgICAgIHJldHVybiBwcmV2LmtleUNvZGUgPT09IGN1cnIua2V5Q29kZTtcbiAgICB9KVxuICApO1xuIiwiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgU2VsZWN0SXRlbURpcmVjdGl2ZSB9IGZyb20gJy4vc2VsZWN0LWl0ZW0uZGlyZWN0aXZlJztcblxuZXhwb3J0IHR5cGUgUHJlZGljYXRlRm48VD4gPSAoaXRlbTogVCkgPT4gYm9vbGVhbjtcblxuZXhwb3J0IGVudW0gVXBkYXRlQWN0aW9ucyB7XG4gIEFkZCxcbiAgUmVtb3ZlXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXBkYXRlQWN0aW9uIHtcbiAgdHlwZTogVXBkYXRlQWN0aW9ucztcbiAgaXRlbTogU2VsZWN0SXRlbURpcmVjdGl2ZTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBPYnNlcnZhYmxlUHJveHk8VD4ge1xuICBwcm94eSQ6IE9ic2VydmFibGU8YW55PjtcbiAgcHJveHk6IFQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2VsZWN0Q29udGFpbmVySG9zdCBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgYm91bmRpbmdDbGllbnRSZWN0OiBCb3VuZGluZ0JveDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTaG9ydGN1dHMge1xuICBkaXNhYmxlU2VsZWN0aW9uOiBzdHJpbmc7XG4gIHRvZ2dsZVNpbmdsZUl0ZW06IHN0cmluZztcbiAgYWRkVG9TZWxlY3Rpb246IHN0cmluZztcbiAgcmVtb3ZlRnJvbVNlbGVjdGlvbjogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIERyYWdUb1NlbGVjdENvbmZpZyB7XG4gIHNlbGVjdGVkQ2xhc3M6IHN0cmluZztcbiAgc2hvcnRjdXRzOiBQYXJ0aWFsPFNob3J0Y3V0cz47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTW91c2VQb3NpdGlvbiB7XG4gIHg6IG51bWJlcjtcbiAgeTogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJvdW5kaW5nQm94IHtcbiAgdG9wOiBudW1iZXI7XG4gIGxlZnQ6IG51bWJlcjtcbiAgd2lkdGg6IG51bWJlcjtcbiAgaGVpZ2h0OiBudW1iZXI7XG59XG5cbmV4cG9ydCB0eXBlIFNlbGVjdEJveElucHV0ID0gW01vdXNlRXZlbnQsIG51bWJlciwgTW91c2VQb3NpdGlvbl07XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2VsZWN0Qm94PFQ+IHtcbiAgdG9wOiBUO1xuICBsZWZ0OiBUO1xuICB3aWR0aDogVDtcbiAgaGVpZ2h0OiBUO1xuICBvcGFjaXR5OiBudW1iZXI7XG59XG5cbmV4cG9ydCBlbnVtIEFjdGlvbiB7XG4gIEFkZCxcbiAgRGVsZXRlLFxuICBOb25lXG59XG4iLCJpbXBvcnQge1xuICBDb21wb25lbnQsXG4gIEVsZW1lbnRSZWYsXG4gIE91dHB1dCxcbiAgRXZlbnRFbWl0dGVyLFxuICBJbnB1dCxcbiAgT25EZXN0cm95LFxuICBSZW5kZXJlcjIsXG4gIFZpZXdDaGlsZCxcbiAgTmdab25lLFxuICBDb250ZW50Q2hpbGRyZW4sXG4gIFF1ZXJ5TGlzdCxcbiAgSG9zdEJpbmRpbmcsXG4gIEFmdGVyVmlld0luaXQsXG4gIFBMQVRGT1JNX0lELFxuICBJbmplY3Rcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IGlzUGxhdGZvcm1Ccm93c2VyIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3ViamVjdCwgY29tYmluZUxhdGVzdCwgbWVyZ2UsIGZyb20sIGZyb21FdmVudCwgQmVoYXZpb3JTdWJqZWN0LCBhc3luY1NjaGVkdWxlciB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQge1xuICBzd2l0Y2hNYXAsXG4gIHRha2VVbnRpbCxcbiAgbWFwLFxuICB0YXAsXG4gIGZpbHRlcixcbiAgYXVkaXRUaW1lLFxuICBtYXBUbyxcbiAgc2hhcmUsXG4gIHdpdGhMYXRlc3RGcm9tLFxuICBkaXN0aW5jdFVudGlsQ2hhbmdlZCxcbiAgb2JzZXJ2ZU9uLFxuICBzdGFydFdpdGgsXG4gIGNvbmNhdE1hcFRvLFxuICBmaXJzdFxufSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7IFNlbGVjdEl0ZW1EaXJlY3RpdmUgfSBmcm9tICcuL3NlbGVjdC1pdGVtLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBTaG9ydGN1dFNlcnZpY2UgfSBmcm9tICcuL3Nob3J0Y3V0LnNlcnZpY2UnO1xuXG5pbXBvcnQgeyBjcmVhdGVTZWxlY3RCb3gsIHdoZW5TZWxlY3RCb3hWaXNpYmxlLCBkaXN0aW5jdEtleUV2ZW50cyB9IGZyb20gJy4vb3BlcmF0b3JzJztcblxuaW1wb3J0IHtcbiAgQWN0aW9uLFxuICBTZWxlY3RCb3gsXG4gIE1vdXNlUG9zaXRpb24sXG4gIFNlbGVjdENvbnRhaW5lckhvc3QsXG4gIFVwZGF0ZUFjdGlvbixcbiAgVXBkYXRlQWN0aW9ucyxcbiAgUHJlZGljYXRlRm5cbn0gZnJvbSAnLi9tb2RlbHMnO1xuXG5pbXBvcnQgeyBBVURJVF9USU1FLCBOT19TRUxFQ1RfQ0xBU1MgfSBmcm9tICcuL2NvbnN0YW50cyc7XG5cbmltcG9ydCB7XG4gIGluQm91bmRpbmdCb3gsXG4gIGN1cnNvcldpdGhpbkVsZW1lbnQsXG4gIGNsZWFyU2VsZWN0aW9uLFxuICBib3hJbnRlcnNlY3RzLFxuICBjYWxjdWxhdGVCb3VuZGluZ0NsaWVudFJlY3QsXG4gIGdldFJlbGF0aXZlTW91c2VQb3NpdGlvbixcbiAgZ2V0TW91c2VQb3NpdGlvbixcbiAgaGFzTWluaW11bVNpemVcbn0gZnJvbSAnLi91dGlscyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2R0cy1zZWxlY3QtY29udGFpbmVyJyxcbiAgZXhwb3J0QXM6ICdkdHMtc2VsZWN0LWNvbnRhaW5lcicsXG4gIGhvc3Q6IHtcbiAgICBjbGFzczogJ2R0cy1zZWxlY3QtY29udGFpbmVyJ1xuICB9LFxuICB0ZW1wbGF0ZTogYFxuICAgIDxuZy1jb250ZW50PjwvbmctY29udGVudD5cbiAgICA8ZGl2XG4gICAgICBjbGFzcz1cImR0cy1zZWxlY3QtYm94XCJcbiAgICAgICNzZWxlY3RCb3hcbiAgICAgIFtuZ0NsYXNzXT1cInNlbGVjdEJveENsYXNzZXMkIHwgYXN5bmNcIlxuICAgICAgW25nU3R5bGVdPVwic2VsZWN0Qm94U3R5bGVzJCB8IGFzeW5jXCJcbiAgICA+PC9kaXY+XG4gIGAsXG4gIHN0eWxlVXJsczogWycuL3NlbGVjdC1jb250YWluZXIuY29tcG9uZW50LnNjc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBTZWxlY3RDb250YWluZXJDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3kge1xuICBob3N0OiBTZWxlY3RDb250YWluZXJIb3N0O1xuICBzZWxlY3RCb3hTdHlsZXMkOiBPYnNlcnZhYmxlPFNlbGVjdEJveDxzdHJpbmc+PjtcbiAgc2VsZWN0Qm94Q2xhc3NlcyQ6IE9ic2VydmFibGU8eyBba2V5OiBzdHJpbmddOiBib29sZWFuIH0+O1xuXG4gIEBWaWV3Q2hpbGQoJ3NlbGVjdEJveCcpXG4gIHByaXZhdGUgJHNlbGVjdEJveDogRWxlbWVudFJlZjtcblxuICBAQ29udGVudENoaWxkcmVuKFNlbGVjdEl0ZW1EaXJlY3RpdmUsIHsgZGVzY2VuZGFudHM6IHRydWUgfSlcbiAgcHJpdmF0ZSAkc2VsZWN0YWJsZUl0ZW1zOiBRdWVyeUxpc3Q8U2VsZWN0SXRlbURpcmVjdGl2ZT47XG5cbiAgQElucHV0KClcbiAgc2VsZWN0ZWRJdGVtczogYW55O1xuXG4gIEBJbnB1dCgpXG4gIHNlbGVjdE9uRHJhZyA9IHRydWU7XG5cbiAgQElucHV0KClcbiAgZGlzYWJsZWQgPSBmYWxzZTtcblxuICBASW5wdXQoKVxuICBkaXNhYmxlRHJhZyA9IGZhbHNlO1xuXG4gIEBJbnB1dCgpXG4gIHNlbGVjdE1vZGUgPSBmYWxzZTtcblxuICBASW5wdXQoKVxuICBzZWxlY3RXaXRoU2hvcnRjdXQgPSBmYWxzZTtcblxuICBASW5wdXQoKVxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmR0cy1jdXN0b20nKVxuICBjdXN0b20gPSBmYWxzZTtcblxuICBAT3V0cHV0KClcbiAgc2VsZWN0ZWRJdGVtc0NoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gIEBPdXRwdXQoKVxuICBzZWxlY3QgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICBAT3V0cHV0KClcbiAgaXRlbVNlbGVjdGVkID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgQE91dHB1dCgpXG4gIGl0ZW1EZXNlbGVjdGVkID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgQE91dHB1dCgpXG4gIHNlbGVjdGlvblN0YXJ0ZWQgPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XG5cbiAgQE91dHB1dCgpXG4gIHNlbGVjdGlvbkVuZGVkID0gbmV3IEV2ZW50RW1pdHRlcjxBcnJheTxhbnk+PigpO1xuXG4gIHByaXZhdGUgX3RtcEl0ZW1zID0gbmV3IE1hcDxTZWxlY3RJdGVtRGlyZWN0aXZlLCBBY3Rpb24+KCk7XG5cbiAgcHJpdmF0ZSBfc2VsZWN0ZWRJdGVtcyQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PEFycmF5PGFueT4+KFtdKTtcbiAgcHJpdmF0ZSB1cGRhdGVJdGVtcyQgPSBuZXcgU3ViamVjdDxVcGRhdGVBY3Rpb24+KCk7XG4gIHByaXZhdGUgZGVzdHJveSQgPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBJbmplY3QoUExBVEZPUk1fSUQpIHByaXZhdGUgcGxhdGZvcm1JZCxcbiAgICBwcml2YXRlIHNob3J0Y3V0czogU2hvcnRjdXRTZXJ2aWNlLFxuICAgIHByaXZhdGUgaG9zdEVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXG4gICAgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyLFxuICAgIHByaXZhdGUgbmdab25lOiBOZ1pvbmVcbiAgKSB7fVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICBpZiAoaXNQbGF0Zm9ybUJyb3dzZXIodGhpcy5wbGF0Zm9ybUlkKSkge1xuICAgICAgdGhpcy5ob3N0ID0gdGhpcy5ob3N0RWxlbWVudFJlZi5uYXRpdmVFbGVtZW50O1xuXG4gICAgICB0aGlzLl9pbml0U2VsZWN0ZWRJdGVtc0NoYW5nZSgpO1xuXG4gICAgICB0aGlzLl9jYWxjdWxhdGVCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIHRoaXMuX29ic2VydmVCb3VuZGluZ1JlY3RDaGFuZ2VzKCk7XG4gICAgICB0aGlzLl9vYnNlcnZlU2VsZWN0YWJsZUl0ZW1zKCk7XG5cbiAgICAgIC8vIGRpc3RpbmN0S2V5RXZlbnRzIGlzIHVzZWQgdG8gcHJldmVudCBtdWx0aXBsZSBrZXkgZXZlbnRzIHRvIGJlIGZpcmVkIHJlcGVhdGVkbHlcbiAgICAgIC8vIG9uIFdpbmRvd3Mgd2hlbiBhIGtleSBpcyBiZWluZyBwcmVzc2VkXG5cbiAgICAgIGNvbnN0IGtleWRvd24kID0gZnJvbUV2ZW50PEtleWJvYXJkRXZlbnQ+KHdpbmRvdywgJ2tleWRvd24nKS5waXBlKFxuICAgICAgICBkaXN0aW5jdEtleUV2ZW50cygpLFxuICAgICAgICBzaGFyZSgpXG4gICAgICApO1xuXG4gICAgICBjb25zdCBrZXl1cCQgPSBmcm9tRXZlbnQ8S2V5Ym9hcmRFdmVudD4od2luZG93LCAna2V5dXAnKS5waXBlKFxuICAgICAgICBkaXN0aW5jdEtleUV2ZW50cygpLFxuICAgICAgICBzaGFyZSgpXG4gICAgICApO1xuXG4gICAgICBjb25zdCBtb3VzZXVwJCA9IGZyb21FdmVudDxNb3VzZUV2ZW50Pih3aW5kb3csICdtb3VzZXVwJykucGlwZShcbiAgICAgICAgZmlsdGVyKCgpID0+ICF0aGlzLmRpc2FibGVkKSxcbiAgICAgICAgdGFwKCgpID0+IHRoaXMuX29uTW91c2VVcCgpKSxcbiAgICAgICAgc2hhcmUoKVxuICAgICAgKTtcblxuICAgICAgY29uc3QgbW91c2Vtb3ZlJCA9IGZyb21FdmVudDxNb3VzZUV2ZW50Pih3aW5kb3csICdtb3VzZW1vdmUnKS5waXBlKFxuICAgICAgICBmaWx0ZXIoKCkgPT4gIXRoaXMuZGlzYWJsZWQpLFxuICAgICAgICBzaGFyZSgpXG4gICAgICApO1xuXG4gICAgICBjb25zdCBtb3VzZWRvd24kID0gZnJvbUV2ZW50PE1vdXNlRXZlbnQ+KHRoaXMuaG9zdCwgJ21vdXNlZG93bicpLnBpcGUoXG4gICAgICAgIGZpbHRlcihldmVudCA9PiBldmVudC5idXR0b24gPT09IDApLCAvLyBvbmx5IGVtaXQgbGVmdCBtb3VzZVxuICAgICAgICBmaWx0ZXIoKCkgPT4gIXRoaXMuZGlzYWJsZWQpLFxuICAgICAgICB0YXAoZXZlbnQgPT4gdGhpcy5fb25Nb3VzZURvd24oZXZlbnQpKSxcbiAgICAgICAgc2hhcmUoKVxuICAgICAgKTtcblxuICAgICAgY29uc3QgZHJhZ2dpbmckID0gbW91c2Vkb3duJC5waXBlKFxuICAgICAgICBmaWx0ZXIoZXZlbnQgPT4gIXRoaXMuc2hvcnRjdXRzLmRpc2FibGVTZWxlY3Rpb24oZXZlbnQpKSxcbiAgICAgICAgZmlsdGVyKCgpID0+ICF0aGlzLnNlbGVjdE1vZGUpLFxuICAgICAgICBmaWx0ZXIoKCkgPT4gIXRoaXMuZGlzYWJsZURyYWcpLFxuICAgICAgICBzd2l0Y2hNYXAoKCkgPT4gbW91c2Vtb3ZlJC5waXBlKHRha2VVbnRpbChtb3VzZXVwJCkpKSxcbiAgICAgICAgc2hhcmUoKVxuICAgICAgKTtcblxuICAgICAgY29uc3QgY3VycmVudE1vdXNlUG9zaXRpb24kOiBPYnNlcnZhYmxlPE1vdXNlUG9zaXRpb24+ID0gbW91c2Vkb3duJC5waXBlKFxuICAgICAgICBtYXAoKGV2ZW50OiBNb3VzZUV2ZW50KSA9PiBnZXRSZWxhdGl2ZU1vdXNlUG9zaXRpb24oZXZlbnQsIHRoaXMuaG9zdCkpXG4gICAgICApO1xuXG4gICAgICBjb25zdCBzaG93JCA9IGRyYWdnaW5nJC5waXBlKG1hcFRvKDEpKTtcbiAgICAgIGNvbnN0IGhpZGUkID0gbW91c2V1cCQucGlwZShtYXBUbygwKSk7XG4gICAgICBjb25zdCBvcGFjaXR5JCA9IG1lcmdlKHNob3ckLCBoaWRlJCkucGlwZShkaXN0aW5jdFVudGlsQ2hhbmdlZCgpKTtcblxuICAgICAgY29uc3Qgc2VsZWN0Qm94JCA9IGNvbWJpbmVMYXRlc3QoZHJhZ2dpbmckLCBvcGFjaXR5JCwgY3VycmVudE1vdXNlUG9zaXRpb24kKS5waXBlKFxuICAgICAgICBjcmVhdGVTZWxlY3RCb3godGhpcy5ob3N0KSxcbiAgICAgICAgc2hhcmUoKVxuICAgICAgKTtcblxuICAgICAgdGhpcy5zZWxlY3RCb3hDbGFzc2VzJCA9IG1lcmdlKGRyYWdnaW5nJCwgbW91c2V1cCQsIGtleWRvd24kLCBrZXl1cCQpLnBpcGUoXG4gICAgICAgIGF1ZGl0VGltZShBVURJVF9USU1FKSxcbiAgICAgICAgd2l0aExhdGVzdEZyb20oc2VsZWN0Qm94JCksXG4gICAgICAgIG1hcCgoW2V2ZW50LCBzZWxlY3RCb3hdKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICdkdHMtYWRkaW5nJzogaGFzTWluaW11bVNpemUoc2VsZWN0Qm94LCAwLCAwKSAmJiAhdGhpcy5zaG9ydGN1dHMucmVtb3ZlRnJvbVNlbGVjdGlvbihldmVudCksXG4gICAgICAgICAgICAnZHRzLXJlbW92aW5nJzogdGhpcy5zaG9ydGN1dHMucmVtb3ZlRnJvbVNlbGVjdGlvbihldmVudClcbiAgICAgICAgICB9O1xuICAgICAgICB9KSxcbiAgICAgICAgZGlzdGluY3RVbnRpbENoYW5nZWQoKGEsIGIpID0+IEpTT04uc3RyaW5naWZ5KGEpID09PSBKU09OLnN0cmluZ2lmeShiKSlcbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IHNlbGVjdE9uTW91c2VVcCQgPSBkcmFnZ2luZyQucGlwZShcbiAgICAgICAgZmlsdGVyKCgpID0+ICF0aGlzLnNlbGVjdE9uRHJhZyksXG4gICAgICAgIGZpbHRlcigoKSA9PiAhdGhpcy5zZWxlY3RNb2RlKSxcbiAgICAgICAgZmlsdGVyKGV2ZW50ID0+IHRoaXMuX2N1cnNvcldpdGhpbkhvc3QoZXZlbnQpKSxcbiAgICAgICAgc3dpdGNoTWFwKF8gPT4gbW91c2V1cCQucGlwZShmaXJzdCgpKSksXG4gICAgICAgIGZpbHRlcihcbiAgICAgICAgICBldmVudCA9PlxuICAgICAgICAgICAgKCF0aGlzLnNob3J0Y3V0cy5kaXNhYmxlU2VsZWN0aW9uKGV2ZW50KSAmJiAhdGhpcy5zaG9ydGN1dHMudG9nZ2xlU2luZ2xlSXRlbShldmVudCkpIHx8XG4gICAgICAgICAgICB0aGlzLnNob3J0Y3V0cy5yZW1vdmVGcm9tU2VsZWN0aW9uKGV2ZW50KVxuICAgICAgICApXG4gICAgICApO1xuXG4gICAgICBjb25zdCBzZWxlY3RPbkRyYWckID0gc2VsZWN0Qm94JC5waXBlKFxuICAgICAgICBhdWRpdFRpbWUoQVVESVRfVElNRSksXG4gICAgICAgIHdpdGhMYXRlc3RGcm9tKG1vdXNlbW92ZSQsIChzZWxlY3RCb3gsIGV2ZW50OiBNb3VzZUV2ZW50KSA9PiAoe1xuICAgICAgICAgIHNlbGVjdEJveCxcbiAgICAgICAgICBldmVudFxuICAgICAgICB9KSksXG4gICAgICAgIGZpbHRlcigoKSA9PiB0aGlzLnNlbGVjdE9uRHJhZyksXG4gICAgICAgIGZpbHRlcigoeyBzZWxlY3RCb3ggfSkgPT4gaGFzTWluaW11bVNpemUoc2VsZWN0Qm94KSksXG4gICAgICAgIG1hcCgoeyBldmVudCB9KSA9PiBldmVudClcbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IHNlbGVjdE9uS2V5Ym9hcmRFdmVudCQgPSBtZXJnZShrZXlkb3duJCwga2V5dXAkKS5waXBlKFxuICAgICAgICBhdWRpdFRpbWUoQVVESVRfVElNRSksXG4gICAgICAgIHdoZW5TZWxlY3RCb3hWaXNpYmxlKHNlbGVjdEJveCQpLFxuICAgICAgICB0YXAoZXZlbnQgPT4ge1xuICAgICAgICAgIGlmICh0aGlzLl9pc0V4dGVuZGVkU2VsZWN0aW9uKGV2ZW50KSkge1xuICAgICAgICAgICAgdGhpcy5fdG1wSXRlbXMuY2xlYXIoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fZmx1c2hJdGVtcygpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICk7XG5cbiAgICAgIG1lcmdlKHNlbGVjdE9uTW91c2VVcCQsIHNlbGVjdE9uRHJhZyQsIHNlbGVjdE9uS2V5Ym9hcmRFdmVudCQpXG4gICAgICAgIC5waXBlKHRha2VVbnRpbCh0aGlzLmRlc3Ryb3kkKSlcbiAgICAgICAgLnN1YnNjcmliZShldmVudCA9PiB0aGlzLl9zZWxlY3RJdGVtcyhldmVudCkpO1xuXG4gICAgICB0aGlzLnNlbGVjdEJveFN0eWxlcyQgPSBzZWxlY3RCb3gkLnBpcGUoXG4gICAgICAgIG1hcChzZWxlY3RCb3ggPT4gKHtcbiAgICAgICAgICB0b3A6IGAke3NlbGVjdEJveC50b3B9cHhgLFxuICAgICAgICAgIGxlZnQ6IGAke3NlbGVjdEJveC5sZWZ0fXB4YCxcbiAgICAgICAgICB3aWR0aDogYCR7c2VsZWN0Qm94LndpZHRofXB4YCxcbiAgICAgICAgICBoZWlnaHQ6IGAke3NlbGVjdEJveC5oZWlnaHR9cHhgLFxuICAgICAgICAgIG9wYWNpdHk6IHNlbGVjdEJveC5vcGFjaXR5XG4gICAgICAgIH0pKVxuICAgICAgKTtcblxuICAgICAgdGhpcy5faW5pdFNlbGVjdGlvbk91dHB1dHMobW91c2Vkb3duJCwgbW91c2V1cCQpO1xuICAgIH1cbiAgfVxuXG4gIHNlbGVjdEFsbCgpIHtcbiAgICB0aGlzLiRzZWxlY3RhYmxlSXRlbXMuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgIHRoaXMuX3NlbGVjdEl0ZW0oaXRlbSk7XG4gICAgfSk7XG4gIH1cblxuICB0b2dnbGVJdGVtczxUPihwcmVkaWNhdGU6IFByZWRpY2F0ZUZuPFQ+KSB7XG4gICAgdGhpcy5fZmlsdGVyU2VsZWN0YWJsZUl0ZW1zKHByZWRpY2F0ZSkuc3Vic2NyaWJlKChpdGVtOiBTZWxlY3RJdGVtRGlyZWN0aXZlKSA9PiB0aGlzLl90b2dnbGVJdGVtKGl0ZW0pKTtcbiAgfVxuXG4gIHNlbGVjdEl0ZW1zPFQ+KHByZWRpY2F0ZTogUHJlZGljYXRlRm48VD4pIHtcbiAgICB0aGlzLl9maWx0ZXJTZWxlY3RhYmxlSXRlbXMocHJlZGljYXRlKS5zdWJzY3JpYmUoKGl0ZW06IFNlbGVjdEl0ZW1EaXJlY3RpdmUpID0+IHRoaXMuX3NlbGVjdEl0ZW0oaXRlbSkpO1xuICB9XG5cbiAgZGVzZWxlY3RJdGVtczxUPihwcmVkaWNhdGU6IFByZWRpY2F0ZUZuPFQ+KSB7XG4gICAgdGhpcy5fZmlsdGVyU2VsZWN0YWJsZUl0ZW1zKHByZWRpY2F0ZSkuc3Vic2NyaWJlKChpdGVtOiBTZWxlY3RJdGVtRGlyZWN0aXZlKSA9PiB0aGlzLl9kZXNlbGVjdEl0ZW0oaXRlbSkpO1xuICB9XG5cbiAgY2xlYXJTZWxlY3Rpb24oKSB7XG4gICAgdGhpcy4kc2VsZWN0YWJsZUl0ZW1zLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICB0aGlzLl9kZXNlbGVjdEl0ZW0oaXRlbSk7XG4gICAgfSk7XG4gIH1cblxuICB1cGRhdGUoKSB7XG4gICAgdGhpcy5fY2FsY3VsYXRlQm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgdGhpcy4kc2VsZWN0YWJsZUl0ZW1zLmZvckVhY2goaXRlbSA9PiBpdGVtLmNhbGN1bGF0ZUJvdW5kaW5nQ2xpZW50UmVjdCgpKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuZGVzdHJveSQubmV4dCgpO1xuICAgIHRoaXMuZGVzdHJveSQuY29tcGxldGUoKTtcbiAgfVxuXG4gIHByaXZhdGUgX2ZpbHRlclNlbGVjdGFibGVJdGVtczxUPihwcmVkaWNhdGU6IFByZWRpY2F0ZUZuPFQ+KSB7XG4gICAgLy8gV3JhcCBzZWxlY3QgaXRlbXMgaW4gYW4gb2JzZXJ2YWJsZSBmb3IgYmV0dGVyIGVmZmljaWVuY3kgYXNcbiAgICAvLyBubyBpbnRlcm1lZGlhdGUgYXJyYXlzIGFyZSBjcmVhdGVkIGFuZCB3ZSBvbmx5IG5lZWQgdG8gcHJvY2Vzc1xuICAgIC8vIGV2ZXJ5IGl0ZW0gb25jZS5cbiAgICByZXR1cm4gZnJvbSh0aGlzLiRzZWxlY3RhYmxlSXRlbXMudG9BcnJheSgpKS5waXBlKGZpbHRlcihpdGVtID0+IHByZWRpY2F0ZShpdGVtLnZhbHVlKSkpO1xuICB9XG5cbiAgcHJpdmF0ZSBfaW5pdFNlbGVjdGVkSXRlbXNDaGFuZ2UoKSB7XG4gICAgdGhpcy5fc2VsZWN0ZWRJdGVtcyRcbiAgICAgIC5waXBlKFxuICAgICAgICBhdWRpdFRpbWUoQVVESVRfVElNRSksXG4gICAgICAgIHRha2VVbnRpbCh0aGlzLmRlc3Ryb3kkKVxuICAgICAgKVxuICAgICAgLnN1YnNjcmliZSh7XG4gICAgICAgIG5leHQ6IHNlbGVjdGVkSXRlbXMgPT4ge1xuICAgICAgICAgIHRoaXMuc2VsZWN0ZWRJdGVtc0NoYW5nZS5lbWl0KHNlbGVjdGVkSXRlbXMpO1xuICAgICAgICAgIHRoaXMuc2VsZWN0LmVtaXQoc2VsZWN0ZWRJdGVtcyk7XG4gICAgICAgIH0sXG4gICAgICAgIGNvbXBsZXRlOiAoKSA9PiB7XG4gICAgICAgICAgdGhpcy5zZWxlY3RlZEl0ZW1zQ2hhbmdlLmVtaXQoW10pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgX29ic2VydmVTZWxlY3RhYmxlSXRlbXMoKSB7XG4gICAgLy8gTGlzdGVuIGZvciB1cGRhdGVzIGFuZCBlaXRoZXIgc2VsZWN0IG9yIGRlc2VsZWN0IGFuIGl0ZW1cbiAgICB0aGlzLnVwZGF0ZUl0ZW1zJFxuICAgICAgLnBpcGUoXG4gICAgICAgIHdpdGhMYXRlc3RGcm9tKHRoaXMuX3NlbGVjdGVkSXRlbXMkKSxcbiAgICAgICAgdGFrZVVudGlsKHRoaXMuZGVzdHJveSQpXG4gICAgICApXG4gICAgICAuc3Vic2NyaWJlKChbdXBkYXRlLCBzZWxlY3RlZEl0ZW1zXTogW1VwZGF0ZUFjdGlvbiwgYW55W11dKSA9PiB7XG4gICAgICAgIGNvbnN0IGl0ZW0gPSB1cGRhdGUuaXRlbTtcblxuICAgICAgICBzd2l0Y2ggKHVwZGF0ZS50eXBlKSB7XG4gICAgICAgICAgY2FzZSBVcGRhdGVBY3Rpb25zLkFkZDpcbiAgICAgICAgICAgIGlmICh0aGlzLl9hZGRJdGVtKGl0ZW0sIHNlbGVjdGVkSXRlbXMpKSB7XG4gICAgICAgICAgICAgIGl0ZW0uX3NlbGVjdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBVcGRhdGVBY3Rpb25zLlJlbW92ZTpcbiAgICAgICAgICAgIGlmICh0aGlzLl9yZW1vdmVJdGVtKGl0ZW0sIHNlbGVjdGVkSXRlbXMpKSB7XG4gICAgICAgICAgICAgIGl0ZW0uX2Rlc2VsZWN0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAvLyBVcGRhdGUgdGhlIGNvbnRhaW5lciBhcyB3ZWxsIGFzIGFsbCBzZWxlY3RhYmxlIGl0ZW1zIGlmIHRoZSBsaXN0IGhhcyBjaGFuZ2VkXG4gICAgdGhpcy4kc2VsZWN0YWJsZUl0ZW1zLmNoYW5nZXNcbiAgICAgIC5waXBlKFxuICAgICAgICB3aXRoTGF0ZXN0RnJvbSh0aGlzLl9zZWxlY3RlZEl0ZW1zJCksXG4gICAgICAgIG9ic2VydmVPbihhc3luY1NjaGVkdWxlciksXG4gICAgICAgIHRha2VVbnRpbCh0aGlzLmRlc3Ryb3kkKVxuICAgICAgKVxuICAgICAgLnN1YnNjcmliZSgoW2l0ZW1zLCBzZWxlY3RlZEl0ZW1zXTogW1F1ZXJ5TGlzdDxTZWxlY3RJdGVtRGlyZWN0aXZlPiwgYW55W11dKSA9PiB7XG4gICAgICAgIGNvbnN0IG5ld0xpc3QgPSBpdGVtcy50b0FycmF5KCk7XG4gICAgICAgIGNvbnN0IHJlbW92ZWRJdGVtcyA9IHNlbGVjdGVkSXRlbXMuZmlsdGVyKGl0ZW0gPT4gIW5ld0xpc3QuaW5jbHVkZXMoaXRlbS52YWx1ZSkpO1xuXG4gICAgICAgIGlmIChyZW1vdmVkSXRlbXMubGVuZ3RoKSB7XG4gICAgICAgICAgcmVtb3ZlZEl0ZW1zLmZvckVhY2goaXRlbSA9PiB0aGlzLl9yZW1vdmVJdGVtKGl0ZW0sIHNlbGVjdGVkSXRlbXMpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgX29ic2VydmVCb3VuZGluZ1JlY3RDaGFuZ2VzKCkge1xuICAgIHRoaXMubmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcbiAgICAgIGNvbnN0IHJlc2l6ZSQgPSBmcm9tRXZlbnQod2luZG93LCAncmVzaXplJyk7XG4gICAgICBjb25zdCB3aW5kb3dTY3JvbGwkID0gZnJvbUV2ZW50KHdpbmRvdywgJ3Njcm9sbCcpO1xuICAgICAgY29uc3QgY29udGFpbmVyU2Nyb2xsJCA9IGZyb21FdmVudCh0aGlzLmhvc3QsICdzY3JvbGwnKTtcblxuICAgICAgbWVyZ2UocmVzaXplJCwgd2luZG93U2Nyb2xsJCwgY29udGFpbmVyU2Nyb2xsJClcbiAgICAgICAgLnBpcGUoXG4gICAgICAgICAgc3RhcnRXaXRoKCdJTklUSUFMX1VQREFURScpLFxuICAgICAgICAgIGF1ZGl0VGltZShBVURJVF9USU1FKSxcbiAgICAgICAgICB0YWtlVW50aWwodGhpcy5kZXN0cm95JClcbiAgICAgICAgKVxuICAgICAgICAuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgX2luaXRTZWxlY3Rpb25PdXRwdXRzKG1vdXNlZG93biQ6IE9ic2VydmFibGU8TW91c2VFdmVudD4sIG1vdXNldXAkOiBPYnNlcnZhYmxlPE1vdXNlRXZlbnQ+KSB7XG4gICAgbW91c2Vkb3duJFxuICAgICAgLnBpcGUoXG4gICAgICAgIGZpbHRlcihldmVudCA9PiB0aGlzLl9jdXJzb3JXaXRoaW5Ib3N0KGV2ZW50KSksXG4gICAgICAgIHRhcCgoKSA9PiB0aGlzLnNlbGVjdGlvblN0YXJ0ZWQuZW1pdCgpKSxcbiAgICAgICAgY29uY2F0TWFwVG8obW91c2V1cCQucGlwZShmaXJzdCgpKSksXG4gICAgICAgIHdpdGhMYXRlc3RGcm9tKHRoaXMuX3NlbGVjdGVkSXRlbXMkKSxcbiAgICAgICAgbWFwKChbLCBpdGVtc10pID0+IGl0ZW1zKSxcbiAgICAgICAgdGFrZVVudGlsKHRoaXMuZGVzdHJveSQpXG4gICAgICApXG4gICAgICAuc3Vic2NyaWJlKGl0ZW1zID0+IHtcbiAgICAgICAgdGhpcy5zZWxlY3Rpb25FbmRlZC5lbWl0KGl0ZW1zKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBfY2FsY3VsYXRlQm91bmRpbmdDbGllbnRSZWN0KCkge1xuICAgIHRoaXMuaG9zdC5ib3VuZGluZ0NsaWVudFJlY3QgPSBjYWxjdWxhdGVCb3VuZGluZ0NsaWVudFJlY3QodGhpcy5ob3N0KTtcbiAgfVxuXG4gIHByaXZhdGUgX2N1cnNvcldpdGhpbkhvc3QoZXZlbnQ6IE1vdXNlRXZlbnQpIHtcbiAgICByZXR1cm4gY3Vyc29yV2l0aGluRWxlbWVudChldmVudCwgdGhpcy5ob3N0KTtcbiAgfVxuXG4gIHByaXZhdGUgX29uTW91c2VVcCgpIHtcbiAgICB0aGlzLl9mbHVzaEl0ZW1zKCk7XG4gICAgdGhpcy5yZW5kZXJlci5yZW1vdmVDbGFzcyhkb2N1bWVudC5ib2R5LCBOT19TRUxFQ1RfQ0xBU1MpO1xuICB9XG5cbiAgcHJpdmF0ZSBfb25Nb3VzZURvd24oZXZlbnQ6IE1vdXNlRXZlbnQpIHtcbiAgICBpZiAodGhpcy5zaG9ydGN1dHMuZGlzYWJsZVNlbGVjdGlvbihldmVudCkgfHwgdGhpcy5kaXNhYmxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNsZWFyU2VsZWN0aW9uKHdpbmRvdyk7XG5cbiAgICBpZiAoIXRoaXMuZGlzYWJsZURyYWcpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3MoZG9jdW1lbnQuYm9keSwgTk9fU0VMRUNUX0NMQVNTKTtcbiAgICB9XG5cbiAgICBjb25zdCBtb3VzZVBvaW50ID0gZ2V0TW91c2VQb3NpdGlvbihldmVudCk7XG5cbiAgICB0aGlzLiRzZWxlY3RhYmxlSXRlbXMuZm9yRWFjaCgoaXRlbSwgaW5kZXgpID0+IHtcbiAgICAgIGNvbnN0IGl0ZW1SZWN0ID0gaXRlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIGNvbnN0IHdpdGhpbkJvdW5kaW5nQm94ID0gaW5Cb3VuZGluZ0JveChtb3VzZVBvaW50LCBpdGVtUmVjdCk7XG5cbiAgICAgIGlmICh0aGlzLnNob3J0Y3V0cy5leHRlbmRlZFNlbGVjdGlvblNob3J0Y3V0KGV2ZW50KSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHNob3VsZEFkZCA9XG4gICAgICAgICh3aXRoaW5Cb3VuZGluZ0JveCAmJlxuICAgICAgICAgICF0aGlzLnNob3J0Y3V0cy50b2dnbGVTaW5nbGVJdGVtKGV2ZW50KSAmJlxuICAgICAgICAgICF0aGlzLnNlbGVjdE1vZGUgJiZcbiAgICAgICAgICAhdGhpcy5zZWxlY3RXaXRoU2hvcnRjdXQpIHx8XG4gICAgICAgICh3aXRoaW5Cb3VuZGluZ0JveCAmJiB0aGlzLnNob3J0Y3V0cy50b2dnbGVTaW5nbGVJdGVtKGV2ZW50KSAmJiAhaXRlbS5zZWxlY3RlZCkgfHxcbiAgICAgICAgKCF3aXRoaW5Cb3VuZGluZ0JveCAmJiB0aGlzLnNob3J0Y3V0cy50b2dnbGVTaW5nbGVJdGVtKGV2ZW50KSAmJiBpdGVtLnNlbGVjdGVkKSB8fFxuICAgICAgICAod2l0aGluQm91bmRpbmdCb3ggJiYgIWl0ZW0uc2VsZWN0ZWQgJiYgdGhpcy5zZWxlY3RNb2RlKSB8fFxuICAgICAgICAoIXdpdGhpbkJvdW5kaW5nQm94ICYmIGl0ZW0uc2VsZWN0ZWQgJiYgdGhpcy5zZWxlY3RNb2RlKTtcblxuICAgICAgY29uc3Qgc2hvdWxkUmVtb3ZlID1cbiAgICAgICAgKCF3aXRoaW5Cb3VuZGluZ0JveCAmJlxuICAgICAgICAgICF0aGlzLnNob3J0Y3V0cy50b2dnbGVTaW5nbGVJdGVtKGV2ZW50KSAmJlxuICAgICAgICAgICF0aGlzLnNlbGVjdE1vZGUgJiZcbiAgICAgICAgICAhdGhpcy5zZWxlY3RXaXRoU2hvcnRjdXQpIHx8XG4gICAgICAgICghd2l0aGluQm91bmRpbmdCb3ggJiYgdGhpcy5zaG9ydGN1dHMudG9nZ2xlU2luZ2xlSXRlbShldmVudCkgJiYgIWl0ZW0uc2VsZWN0ZWQpIHx8XG4gICAgICAgICh3aXRoaW5Cb3VuZGluZ0JveCAmJiB0aGlzLnNob3J0Y3V0cy50b2dnbGVTaW5nbGVJdGVtKGV2ZW50KSAmJiBpdGVtLnNlbGVjdGVkKSB8fFxuICAgICAgICAoIXdpdGhpbkJvdW5kaW5nQm94ICYmICFpdGVtLnNlbGVjdGVkICYmIHRoaXMuc2VsZWN0TW9kZSkgfHxcbiAgICAgICAgKHdpdGhpbkJvdW5kaW5nQm94ICYmIGl0ZW0uc2VsZWN0ZWQgJiYgdGhpcy5zZWxlY3RNb2RlKTtcblxuICAgICAgaWYgKHNob3VsZEFkZCkge1xuICAgICAgICB0aGlzLl9zZWxlY3RJdGVtKGl0ZW0pO1xuICAgICAgfSBlbHNlIGlmIChzaG91bGRSZW1vdmUpIHtcbiAgICAgICAgdGhpcy5fZGVzZWxlY3RJdGVtKGl0ZW0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBfc2VsZWN0SXRlbXMoZXZlbnQ6IEV2ZW50KSB7XG4gICAgY29uc3Qgc2VsZWN0aW9uQm94ID0gY2FsY3VsYXRlQm91bmRpbmdDbGllbnRSZWN0KHRoaXMuJHNlbGVjdEJveC5uYXRpdmVFbGVtZW50KTtcblxuICAgIHRoaXMuJHNlbGVjdGFibGVJdGVtcy5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgaWYgKHRoaXMuX2lzRXh0ZW5kZWRTZWxlY3Rpb24oZXZlbnQpKSB7XG4gICAgICAgIHRoaXMuX2V4dGVuZGVkU2VsZWN0aW9uTW9kZShzZWxlY3Rpb25Cb3gsIGl0ZW0sIGV2ZW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX25vcm1hbFNlbGVjdGlvbk1vZGUoc2VsZWN0aW9uQm94LCBpdGVtLCBldmVudCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIF9pc0V4dGVuZGVkU2VsZWN0aW9uKGV2ZW50OiBFdmVudCkge1xuICAgIHJldHVybiB0aGlzLnNob3J0Y3V0cy5leHRlbmRlZFNlbGVjdGlvblNob3J0Y3V0KGV2ZW50KSAmJiB0aGlzLnNlbGVjdE9uRHJhZztcbiAgfVxuXG4gIHByaXZhdGUgX25vcm1hbFNlbGVjdGlvbk1vZGUoc2VsZWN0Qm94LCBpdGVtOiBTZWxlY3RJdGVtRGlyZWN0aXZlLCBldmVudDogRXZlbnQpIHtcbiAgICBjb25zdCBpblNlbGVjdGlvbiA9IGJveEludGVyc2VjdHMoc2VsZWN0Qm94LCBpdGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpKTtcblxuICAgIGNvbnN0IHNob3VsZEFkZCA9IGluU2VsZWN0aW9uICYmICFpdGVtLnNlbGVjdGVkICYmICF0aGlzLnNob3J0Y3V0cy5yZW1vdmVGcm9tU2VsZWN0aW9uKGV2ZW50KTtcblxuICAgIGNvbnN0IHNob3VsZFJlbW92ZSA9XG4gICAgICAoIWluU2VsZWN0aW9uICYmIGl0ZW0uc2VsZWN0ZWQgJiYgIXRoaXMuc2hvcnRjdXRzLmFkZFRvU2VsZWN0aW9uKGV2ZW50KSkgfHxcbiAgICAgIChpblNlbGVjdGlvbiAmJiBpdGVtLnNlbGVjdGVkICYmIHRoaXMuc2hvcnRjdXRzLnJlbW92ZUZyb21TZWxlY3Rpb24oZXZlbnQpKTtcblxuICAgIGlmIChzaG91bGRBZGQpIHtcbiAgICAgIHRoaXMuX3NlbGVjdEl0ZW0oaXRlbSk7XG4gICAgfSBlbHNlIGlmIChzaG91bGRSZW1vdmUpIHtcbiAgICAgIHRoaXMuX2Rlc2VsZWN0SXRlbShpdGVtKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIF9leHRlbmRlZFNlbGVjdGlvbk1vZGUoc2VsZWN0Qm94LCBpdGVtOiBTZWxlY3RJdGVtRGlyZWN0aXZlLCBldmVudDogRXZlbnQpIHtcbiAgICBjb25zdCBpblNlbGVjdGlvbiA9IGJveEludGVyc2VjdHMoc2VsZWN0Qm94LCBpdGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpKTtcblxuICAgIGNvbnN0IHNob3VkbEFkZCA9XG4gICAgICAoaW5TZWxlY3Rpb24gJiYgIWl0ZW0uc2VsZWN0ZWQgJiYgIXRoaXMuc2hvcnRjdXRzLnJlbW92ZUZyb21TZWxlY3Rpb24oZXZlbnQpICYmICF0aGlzLl90bXBJdGVtcy5oYXMoaXRlbSkpIHx8XG4gICAgICAoaW5TZWxlY3Rpb24gJiYgaXRlbS5zZWxlY3RlZCAmJiB0aGlzLnNob3J0Y3V0cy5yZW1vdmVGcm9tU2VsZWN0aW9uKGV2ZW50KSAmJiAhdGhpcy5fdG1wSXRlbXMuaGFzKGl0ZW0pKTtcblxuICAgIGNvbnN0IHNob3VsZFJlbW92ZSA9XG4gICAgICAoIWluU2VsZWN0aW9uICYmIGl0ZW0uc2VsZWN0ZWQgJiYgdGhpcy5zaG9ydGN1dHMuYWRkVG9TZWxlY3Rpb24oZXZlbnQpICYmIHRoaXMuX3RtcEl0ZW1zLmhhcyhpdGVtKSkgfHxcbiAgICAgICghaW5TZWxlY3Rpb24gJiYgIWl0ZW0uc2VsZWN0ZWQgJiYgdGhpcy5zaG9ydGN1dHMucmVtb3ZlRnJvbVNlbGVjdGlvbihldmVudCkgJiYgdGhpcy5fdG1wSXRlbXMuaGFzKGl0ZW0pKTtcblxuICAgIGlmIChzaG91ZGxBZGQpIHtcbiAgICAgIGl0ZW0uc2VsZWN0ZWQgPyBpdGVtLl9kZXNlbGVjdCgpIDogaXRlbS5fc2VsZWN0KCk7XG5cbiAgICAgIGNvbnN0IGFjdGlvbiA9IHRoaXMuc2hvcnRjdXRzLnJlbW92ZUZyb21TZWxlY3Rpb24oZXZlbnQpXG4gICAgICAgID8gQWN0aW9uLkRlbGV0ZVxuICAgICAgICA6IHRoaXMuc2hvcnRjdXRzLmFkZFRvU2VsZWN0aW9uKGV2ZW50KVxuICAgICAgICA/IEFjdGlvbi5BZGRcbiAgICAgICAgOiBBY3Rpb24uTm9uZTtcblxuICAgICAgdGhpcy5fdG1wSXRlbXMuc2V0KGl0ZW0sIGFjdGlvbik7XG4gICAgfSBlbHNlIGlmIChzaG91bGRSZW1vdmUpIHtcbiAgICAgIHRoaXMuc2hvcnRjdXRzLnJlbW92ZUZyb21TZWxlY3Rpb24oZXZlbnQpID8gaXRlbS5fc2VsZWN0KCkgOiBpdGVtLl9kZXNlbGVjdCgpO1xuICAgICAgdGhpcy5fdG1wSXRlbXMuZGVsZXRlKGl0ZW0pO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgX2ZsdXNoSXRlbXMoKSB7XG4gICAgdGhpcy5fdG1wSXRlbXMuZm9yRWFjaCgoYWN0aW9uLCBpdGVtKSA9PiB7XG4gICAgICBpZiAoYWN0aW9uID09PSBBY3Rpb24uQWRkKSB7XG4gICAgICAgIHRoaXMuX3NlbGVjdEl0ZW0oaXRlbSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChhY3Rpb24gPT09IEFjdGlvbi5EZWxldGUpIHtcbiAgICAgICAgdGhpcy5fZGVzZWxlY3RJdGVtKGl0ZW0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdGhpcy5fdG1wSXRlbXMuY2xlYXIoKTtcbiAgfVxuXG4gIHByaXZhdGUgX2FkZEl0ZW0oaXRlbTogU2VsZWN0SXRlbURpcmVjdGl2ZSwgc2VsZWN0ZWRJdGVtczogQXJyYXk8YW55Pikge1xuICAgIGxldCBzdWNjZXNzID0gZmFsc2U7XG5cbiAgICBpZiAoIXRoaXMuX2hhc0l0ZW0oaXRlbSwgc2VsZWN0ZWRJdGVtcykpIHtcbiAgICAgIHN1Y2Nlc3MgPSB0cnVlO1xuICAgICAgc2VsZWN0ZWRJdGVtcy5wdXNoKGl0ZW0udmFsdWUpO1xuICAgICAgdGhpcy5fc2VsZWN0ZWRJdGVtcyQubmV4dChzZWxlY3RlZEl0ZW1zKTtcbiAgICAgIHRoaXMuaXRlbVNlbGVjdGVkLmVtaXQoaXRlbS52YWx1ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN1Y2Nlc3M7XG4gIH1cblxuICBwcml2YXRlIF9yZW1vdmVJdGVtKGl0ZW06IFNlbGVjdEl0ZW1EaXJlY3RpdmUsIHNlbGVjdGVkSXRlbXM6IEFycmF5PGFueT4pIHtcbiAgICBsZXQgc3VjY2VzcyA9IGZhbHNlO1xuICAgIGNvbnN0IHZhbHVlID0gaXRlbSBpbnN0YW5jZW9mIFNlbGVjdEl0ZW1EaXJlY3RpdmUgPyBpdGVtLnZhbHVlIDogaXRlbTtcbiAgICBjb25zdCBpbmRleCA9IHNlbGVjdGVkSXRlbXMuaW5kZXhPZih2YWx1ZSk7XG5cbiAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgc3VjY2VzcyA9IHRydWU7XG4gICAgICBzZWxlY3RlZEl0ZW1zLnNwbGljZShpbmRleCwgMSk7XG4gICAgICB0aGlzLl9zZWxlY3RlZEl0ZW1zJC5uZXh0KHNlbGVjdGVkSXRlbXMpO1xuICAgICAgdGhpcy5pdGVtRGVzZWxlY3RlZC5lbWl0KGl0ZW0udmFsdWUpO1xuICAgIH1cblxuICAgIHJldHVybiBzdWNjZXNzO1xuICB9XG5cbiAgcHJpdmF0ZSBfdG9nZ2xlSXRlbShpdGVtOiBTZWxlY3RJdGVtRGlyZWN0aXZlKSB7XG4gICAgaWYgKGl0ZW0uc2VsZWN0ZWQpIHtcbiAgICAgIHRoaXMuX2Rlc2VsZWN0SXRlbShpdGVtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fc2VsZWN0SXRlbShpdGVtKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIF9zZWxlY3RJdGVtKGl0ZW06IFNlbGVjdEl0ZW1EaXJlY3RpdmUpIHtcbiAgICB0aGlzLnVwZGF0ZUl0ZW1zJC5uZXh0KHsgdHlwZTogVXBkYXRlQWN0aW9ucy5BZGQsIGl0ZW0gfSk7XG4gIH1cblxuICBwcml2YXRlIF9kZXNlbGVjdEl0ZW0oaXRlbTogU2VsZWN0SXRlbURpcmVjdGl2ZSkge1xuICAgIHRoaXMudXBkYXRlSXRlbXMkLm5leHQoeyB0eXBlOiBVcGRhdGVBY3Rpb25zLlJlbW92ZSwgaXRlbSB9KTtcbiAgfVxuXG4gIHByaXZhdGUgX2hhc0l0ZW0oaXRlbTogU2VsZWN0SXRlbURpcmVjdGl2ZSwgc2VsZWN0ZWRJdGVtczogQXJyYXk8YW55Pikge1xuICAgIHJldHVybiBzZWxlY3RlZEl0ZW1zLmluY2x1ZGVzKGl0ZW0udmFsdWUpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBEcmFnVG9TZWxlY3RDb25maWcgfSBmcm9tICcuL21vZGVscyc7XG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX0NPTkZJRzogRHJhZ1RvU2VsZWN0Q29uZmlnID0ge1xuICBzZWxlY3RlZENsYXNzOiAnc2VsZWN0ZWQnLFxuICBzaG9ydGN1dHM6IHtcbiAgICBkaXNhYmxlU2VsZWN0aW9uOiAnYWx0JyxcbiAgICB0b2dnbGVTaW5nbGVJdGVtOiAnbWV0YScsXG4gICAgYWRkVG9TZWxlY3Rpb246ICdzaGlmdCcsXG4gICAgcmVtb3ZlRnJvbVNlbGVjdGlvbjogJ3NoaWZ0K21ldGEnXG4gIH1cbn07XG4iLCJpbXBvcnQgeyBOZ01vZHVsZSwgTW9kdWxlV2l0aFByb3ZpZGVycyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxuaW1wb3J0IHsgU2VsZWN0Q29udGFpbmVyQ29tcG9uZW50IH0gZnJvbSAnLi9zZWxlY3QtY29udGFpbmVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBTZWxlY3RJdGVtRGlyZWN0aXZlIH0gZnJvbSAnLi9zZWxlY3QtaXRlbS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgU2hvcnRjdXRTZXJ2aWNlIH0gZnJvbSAnLi9zaG9ydGN1dC5zZXJ2aWNlJztcbmltcG9ydCB7IERyYWdUb1NlbGVjdENvbmZpZyB9IGZyb20gJy4vbW9kZWxzJztcbmltcG9ydCB7IENPTkZJRywgVVNFUl9DT05GSUcgfSBmcm9tICcuL3Rva2Vucyc7XG5pbXBvcnQgeyBERUZBVUxUX0NPTkZJRyB9IGZyb20gJy4vY29uZmlnJztcbmltcG9ydCB7IG1lcmdlRGVlcCB9IGZyb20gJy4vdXRpbHMnO1xuXG5jb25zdCBDT01QT05FTlRTID0gW1NlbGVjdENvbnRhaW5lckNvbXBvbmVudCwgU2VsZWN0SXRlbURpcmVjdGl2ZV07XG5cbmV4cG9ydCBmdW5jdGlvbiBDT05GSUdfRkFDVE9SWShjb25maWc6IFBhcnRpYWw8RHJhZ1RvU2VsZWN0Q29uZmlnPikge1xuICByZXR1cm4gbWVyZ2VEZWVwKERFRkFVTFRfQ09ORklHLCBjb25maWcpO1xufVxuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbQ29tbW9uTW9kdWxlXSxcbiAgZGVjbGFyYXRpb25zOiBbLi4uQ09NUE9ORU5UU10sXG4gIGV4cG9ydHM6IFsuLi5DT01QT05FTlRTXVxufSlcbmV4cG9ydCBjbGFzcyBEcmFnVG9TZWxlY3RNb2R1bGUge1xuICBzdGF0aWMgZm9yUm9vdChjb25maWc6IFBhcnRpYWw8RHJhZ1RvU2VsZWN0Q29uZmlnPiA9IHt9KTogTW9kdWxlV2l0aFByb3ZpZGVycyB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBEcmFnVG9TZWxlY3RNb2R1bGUsXG4gICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgU2hvcnRjdXRTZXJ2aWNlLFxuICAgICAgICB7IHByb3ZpZGU6IFVTRVJfQ09ORklHLCB1c2VWYWx1ZTogY29uZmlnIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiBDT05GSUcsXG4gICAgICAgICAgdXNlRmFjdG9yeTogQ09ORklHX0ZBQ1RPUlksXG4gICAgICAgICAgZGVwczogW1VTRVJfQ09ORklHXVxuICAgICAgICB9XG4gICAgICBdXG4gICAgfTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0FBR0EsTUFBYSxNQUFNLEdBQUcsSUFBSSxjQUFjLENBQXFCLHVCQUF1QixDQUFDOztBQUNyRixNQUFhLFdBQVcsR0FBRyxJQUFJLGNBQWMsQ0FBcUIsYUFBYSxDQUFDOzs7Ozs7O0FDSmhGLE1BQWEsVUFBVSxHQUFHLEVBQUU7O0FBQzVCLE1BQWEsU0FBUyxHQUFHLENBQUM7O0FBQzFCLE1BQWEsVUFBVSxHQUFHLENBQUM7O0FBQzNCLE1BQWEsZUFBZSxHQUFHLGVBQWU7Ozs7OztBQ0g5QztBQUdBLE1BQWEsUUFBUSxHQUFHLENBQUMsSUFBUztJQUNoQyxPQUFPLElBQUksSUFBSSxPQUFPLElBQUksS0FBSyxRQUFRLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksS0FBSyxJQUFJLENBQUM7Q0FDbEY7Ozs7OztBQUVELFNBQWdCLFNBQVMsQ0FBQyxNQUFjLEVBQUUsTUFBYztJQUN0RCxJQUFJLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUU7UUFDeEMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRztZQUM3QixJQUFJLFFBQVEsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRTtnQkFDekIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRTtvQkFDaEIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO2lCQUN0QztnQkFDRCxTQUFTLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2FBQ3JDO2lCQUFNO2dCQUNMLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxHQUFHLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQzthQUMvQztTQUNGLENBQUMsQ0FBQztLQUNKO0lBRUQsT0FBTyxNQUFNLENBQUM7Q0FDZjs7QUFFRCxNQUFhLGNBQWMsR0FBRyxDQUFDLFNBQTRCLEVBQUUsUUFBUSxHQUFHLFNBQVMsRUFBRSxTQUFTLEdBQUcsVUFBVTtJQUN2RyxPQUFPLFNBQVMsQ0FBQyxLQUFLLEdBQUcsUUFBUSxJQUFJLFNBQVMsQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDO0NBQ25FOztBQUVELE1BQWEsY0FBYyxHQUFHLENBQUMsTUFBYzs7VUFDckMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxZQUFZLEVBQUU7SUFFdkMsSUFBSSxTQUFTLENBQUMsZUFBZSxFQUFFO1FBQzdCLFNBQVMsQ0FBQyxlQUFlLEVBQUUsQ0FBQztLQUM3QjtTQUFNLElBQUksU0FBUyxDQUFDLEtBQUssRUFBRTtRQUMxQixTQUFTLENBQUMsS0FBSyxFQUFFLENBQUM7S0FDbkI7Q0FDRjs7QUFFRCxNQUFhLGFBQWEsR0FBRyxDQUFDLEtBQW9CLEVBQUUsR0FBZ0I7SUFDbEUsUUFDRSxHQUFHLENBQUMsSUFBSSxJQUFJLEtBQUssQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsSUFBSSxHQUFHLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxLQUFLLElBQUksR0FBRyxDQUFDLEdBQUcsSUFBSSxLQUFLLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsTUFBTSxFQUMvRztDQUNIOztBQUVELE1BQWEsYUFBYSxHQUFHLENBQUMsSUFBaUIsRUFBRSxJQUFpQjtJQUNoRSxRQUNFLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSztRQUNuQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLElBQUk7UUFDbkMsSUFBSSxDQUFDLEdBQUcsSUFBSSxJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNO1FBQ2xDLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsR0FBRyxFQUNsQztDQUNIOztBQUVELE1BQWEsMkJBQTJCLEdBQUcsQ0FBQyxPQUFvQjtJQUM5RCxPQUFPLE9BQU8sQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO0NBQ3hDOztBQUVELE1BQWEsZ0JBQWdCLEdBQUcsQ0FBQyxLQUFpQjtJQUNoRCxPQUFPO1FBQ0wsQ0FBQyxFQUFFLEtBQUssQ0FBQyxPQUFPO1FBQ2hCLENBQUMsRUFBRSxLQUFLLENBQUMsT0FBTztLQUNqQixDQUFDO0NBQ0g7O0FBRUQsTUFBYSxTQUFTLEdBQUc7SUFDdkIsSUFBSSxDQUFDLFFBQVEsSUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFlLEVBQUU7UUFDMUMsT0FBTztZQUNMLENBQUMsRUFBRSxDQUFDO1lBQ0osQ0FBQyxFQUFFLENBQUM7U0FDTCxDQUFDO0tBQ0g7SUFFRCxPQUFPO1FBQ0wsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxlQUFlLENBQUMsVUFBVSxJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsVUFBVTtRQUNsRSxDQUFDLEVBQUUsUUFBUSxDQUFDLGVBQWUsQ0FBQyxTQUFTLElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxTQUFTO0tBQ2pFLENBQUM7Q0FDSDs7QUFFRCxNQUFhLHdCQUF3QixHQUFHLENBQUMsS0FBaUIsRUFBRSxTQUE4QjtVQUNsRixFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxHQUFHLGdCQUFnQixDQUFDLEtBQUssQ0FBQzs7VUFDcEQsTUFBTSxHQUFHLFNBQVMsRUFBRTs7VUFFcEIsVUFBVSxHQUFHLENBQUMsU0FBUyxDQUFDLGtCQUFrQixDQUFDLEtBQUssR0FBRyxTQUFTLENBQUMsV0FBVyxJQUFJLENBQUM7O1VBQzdFLFVBQVUsR0FBRyxTQUFTLENBQUMsa0JBQWtCLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQyxDQUFDOztVQUN6RCxTQUFTLEdBQUcsU0FBUyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUMsQ0FBQztJQUU3RCxPQUFPO1FBQ0wsQ0FBQyxFQUFFLE9BQU8sR0FBRyxVQUFVLElBQUksVUFBVSxHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBRyxTQUFTLENBQUMsVUFBVTtRQUNsRixDQUFDLEVBQUUsT0FBTyxHQUFHLFVBQVUsSUFBSSxTQUFTLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxTQUFTO0tBQ2pGLENBQUM7Q0FDSDs7QUFFRCxNQUFhLG1CQUFtQixHQUFHLENBQUMsS0FBaUIsRUFBRSxPQUFvQjs7VUFDbkUsVUFBVSxHQUFHLGdCQUFnQixDQUFDLEtBQUssQ0FBQztJQUMxQyxPQUFPLGFBQWEsQ0FBQyxVQUFVLEVBQUUsMkJBQTJCLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztDQUN4RTs7Ozs7O0FDL0ZELE1BMEJhLG1CQUFtQjs7Ozs7OztJQVk5QixZQUMwQixNQUEwQixFQUNyQixVQUFVLEVBQy9CLElBQWdCLEVBQ2hCLFFBQW1CO1FBSEgsV0FBTSxHQUFOLE1BQU0sQ0FBb0I7UUFDckIsZUFBVSxHQUFWLFVBQVUsQ0FBQTtRQUMvQixTQUFJLEdBQUosSUFBSSxDQUFZO1FBQ2hCLGFBQVEsR0FBUixRQUFRLENBQVc7UUFiN0IsYUFBUSxHQUFHLEtBQUssQ0FBQztLQWNiOzs7O0lBVEosSUFBSSxLQUFLO1FBQ1AsT0FBTyxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDO0tBQ3ZEOzs7O0lBU0QsUUFBUTtRQUNOLElBQUksaUJBQWlCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQ3RDLElBQUksQ0FBQywyQkFBMkIsRUFBRSxDQUFDO1NBQ3BDO0tBQ0Y7Ozs7SUFFRCxTQUFTO1FBQ1AsSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7S0FDM0I7Ozs7SUFFRCxxQkFBcUI7UUFDbkIsT0FBTyxJQUFJLENBQUMsbUJBQW1CLENBQUM7S0FDakM7Ozs7SUFFRCwyQkFBMkI7UUFDekIsSUFBSSxDQUFDLG1CQUFtQixHQUFHLDJCQUEyQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7S0FDakY7Ozs7SUFFRCxPQUFPO1FBQ0wsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7S0FDdEI7Ozs7SUFFRCxTQUFTO1FBQ1AsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7S0FDdkI7Ozs7SUFFTyxrQkFBa0I7UUFDeEIsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2pCLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUM7U0FDNUU7YUFBTTtZQUNMLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUM7U0FDL0U7S0FDRjs7O1lBMURGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsaUJBQWlCO2dCQUMzQixRQUFRLEVBQUUsZUFBZTtnQkFDekIsSUFBSSxFQUFFO29CQUNKLEtBQUssRUFBRSxpQkFBaUI7aUJBQ3pCO2FBQ0Y7Ozs7NENBY0ksTUFBTSxTQUFDLE1BQU07NENBQ2IsTUFBTSxTQUFDLFdBQVc7WUFuQ3JCLFVBQVU7WUFPVixTQUFTOzs7NEJBbUJSLEtBQUs7Ozs7Ozs7QUMvQlI7TUFJTSxjQUFjLEdBQUc7SUFDckIsR0FBRyxFQUFFLElBQUk7SUFDVCxLQUFLLEVBQUUsSUFBSTtJQUNYLElBQUksRUFBRSxJQUFJO0lBQ1YsSUFBSSxFQUFFLElBQUk7Q0FDWDs7TUFFSyxRQUFRLEdBQUcsTUFBTTs7TUFFakIsV0FBVyxHQUFHO0lBQ2xCLENBQUMsUUFBUSxHQUFHLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQztDQUM3Qjs7TUFFSyxtQkFBbUIsR0FBRztJQUMxQixnQkFBZ0IsRUFBRSxJQUFJO0lBQ3RCLGdCQUFnQixFQUFFLElBQUk7SUFDdEIsY0FBYyxFQUFFLElBQUk7SUFDcEIsbUJBQW1CLEVBQUUsSUFBSTtDQUMxQjs7TUFFSyxZQUFZLEdBQUcsbUJBQW1CO0FBR3hDLE1BQWEsZUFBZTs7OztJQUcxQixZQUFvQyxNQUEwQjtRQUExQixXQUFNLEdBQU4sTUFBTSxDQUFvQjtRQUZ0RCxlQUFVLEdBQWtDLEVBQUUsQ0FBQztRQUdyRCxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7S0FDcEU7Ozs7O0lBRUQsZ0JBQWdCLENBQUMsS0FBWTtRQUMzQixPQUFPLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxrQkFBa0IsRUFBRSxLQUFLLENBQUMsQ0FBQztLQUMxRDs7Ozs7SUFFRCxnQkFBZ0IsQ0FBQyxLQUFZO1FBQzNCLE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxDQUFDO0tBQzFEOzs7OztJQUVELGNBQWMsQ0FBQyxLQUFZO1FBQ3pCLE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDLGdCQUFnQixFQUFFLEtBQUssQ0FBQyxDQUFDO0tBQ3hEOzs7OztJQUVELG1CQUFtQixDQUFDLEtBQVk7UUFDOUIsT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUMscUJBQXFCLEVBQUUsS0FBSyxDQUFDLENBQUM7S0FDN0Q7Ozs7O0lBRUQseUJBQXlCLENBQUMsS0FBWTtRQUNwQyxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLElBQUksSUFBSSxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQ3RFOzs7OztJQUVPLHlCQUF5QixDQUFDLFNBQW9DOztjQUM5RCxXQUFXLEdBQUcsRUFBRTtRQUV0QixLQUFLLE1BQU0sQ0FBQyxHQUFHLEVBQUUsbUJBQW1CLENBQUMsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQ2xFLElBQUksQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsR0FBRyxDQUFDLEVBQUU7Z0JBQ2xDLE1BQU0sSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxZQUFZLEdBQUcsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO2FBQ3hFO1lBRUQsbUJBQW1CO2lCQUNoQixPQUFPLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQztpQkFDakIsS0FBSyxDQUFDLEdBQUcsQ0FBQztpQkFDVixPQUFPLENBQUMsUUFBUTtnQkFDZixJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxFQUFFO29CQUNyQixXQUFXLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO2lCQUN2Qjs7c0JBRUssS0FBSyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDOztzQkFDM0IsV0FBVyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxFQUFFLEtBQUssRUFBRSxRQUFRLENBQUM7Z0JBRWpFLFdBQVcsQ0FBQyxPQUFPLENBQUMsVUFBVTs7MEJBQ3RCLGNBQWMsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxDQUFDO29CQUV4RCxJQUFJLGNBQWMsRUFBRTt3QkFDbEIsTUFBTSxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsY0FBYyxpQkFBaUIsUUFBUSxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7cUJBQ3hHO29CQUVELFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxRQUFRLElBQUksR0FBRyxRQUFRLEtBQUssQ0FBQyxDQUFDLENBQUM7aUJBQ3JFLENBQUMsQ0FBQzthQUNKLENBQUMsQ0FBQztTQUNOO1FBRUQsT0FBTyxXQUFXLENBQUM7S0FDcEI7Ozs7Ozs7SUFFTyxhQUFhLENBQUMsUUFBZ0IsRUFBRSxLQUFvQixFQUFFLGFBQXFCOztjQUMzRSxhQUFhLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUM7O2NBQ2hELG1CQUFtQixHQUFHLEVBQUU7UUFFOUIsSUFBSSxhQUFhLEVBQUU7O2tCQUNYLGFBQWEsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLE9BQU8sSUFBSSxPQUFPLEtBQUssUUFBUSxDQUFDO1lBRW5FLFdBQVcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUs7Z0JBQzVCLG1CQUFtQixDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsYUFBYSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7YUFDckQsQ0FBQyxDQUFDO1NBQ0o7YUFBTTtZQUNMLG1CQUFtQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNqQztRQUVELE9BQU8sbUJBQW1CLENBQUM7S0FDNUI7Ozs7O0lBRU8sZUFBZSxDQUFDLE9BQWU7UUFDckMsT0FBTyxHQUFHLFlBQVksSUFBSSxPQUFPLEVBQUUsQ0FBQztLQUNyQzs7Ozs7O0lBRU8saUJBQWlCLENBQUMsWUFBb0IsRUFBRSxLQUFZOztjQUNwRCxTQUFTLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUM7UUFFL0MsT0FBTyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVE7WUFDNUIsT0FBTyxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztTQUMxQyxDQUFDLENBQUM7S0FDSjs7Ozs7SUFFTyxnQkFBZ0IsQ0FBQyxLQUFvQjs7WUFDdkMsY0FBYyxHQUFHLElBQUk7UUFFekIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHO1lBQ2YsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDeEIsY0FBYyxHQUFHLEdBQUcsQ0FBQztnQkFDckIsT0FBTzthQUNSO1NBQ0YsQ0FBQyxDQUFDO1FBRUgsT0FBTyxjQUFjLENBQUM7S0FDdkI7Ozs7O0lBRU8sbUJBQW1CLENBQUMsUUFBZ0I7UUFDMUMsT0FBTyxtQkFBbUIsQ0FBQyxRQUFRLENBQUMsQ0FBQztLQUN0Qzs7O1lBMUdGLFVBQVU7Ozs7NENBSUksTUFBTSxTQUFDLE1BQU07Ozs7Ozs7QUM3QjVCO0FBSUEsTUFBYSxlQUFlLEdBQUcsQ0FBQyxTQUE4QixLQUFLLENBQ2pFLE1BQWtDLEtBRWxDLE1BQU0sQ0FBQyxJQUFJLENBQ1QsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDOzs7O1VBR3ZCLGFBQWEsR0FBa0Isd0JBQXdCLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQzs7VUFFekUsS0FBSyxHQUFHLE9BQU8sR0FBRyxDQUFDLEdBQUcsYUFBYSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQzs7VUFDN0MsTUFBTSxHQUFHLE9BQU8sR0FBRyxDQUFDLEdBQUcsYUFBYSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQztJQUVwRCxPQUFPO1FBQ0wsR0FBRyxFQUFFLE1BQU0sR0FBRyxDQUFDLEdBQUcsYUFBYSxDQUFDLENBQUMsR0FBRyxDQUFDO1FBQ3JDLElBQUksRUFBRSxLQUFLLEdBQUcsQ0FBQyxHQUFHLGFBQWEsQ0FBQyxDQUFDLEdBQUcsQ0FBQztRQUNyQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUM7UUFDdEIsTUFBTSxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDO1FBQ3hCLE9BQU87S0FDUixDQUFDO0NBQ0gsQ0FBQyxDQUNIOztBQUVILE1BQWEsb0JBQW9CLEdBQUcsQ0FBQyxVQUF5QyxLQUFLLENBQUMsTUFBeUIsS0FDM0csTUFBTSxDQUFDLElBQUksQ0FDVCxjQUFjLENBQUMsVUFBVSxDQUFDLEVBQzFCLE1BQU0sQ0FBQyxDQUFDLEdBQUcsU0FBUyxDQUFDLEtBQUssY0FBYyxDQUFDLFNBQVMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFDMUQsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLEtBQUssS0FBSyxDQUFDLENBQzNCOztBQUVILE1BQWEsaUJBQWlCLEdBQUcsTUFBTSxDQUFDLE1BQWlDLEtBQ3ZFLE1BQU0sQ0FBQyxJQUFJLENBQ1Qsb0JBQW9CLENBQUMsQ0FBQyxJQUFJLEVBQUUsSUFBSTtJQUM5QixPQUFPLElBQUksQ0FBQyxPQUFPLEtBQUssSUFBSSxDQUFDLE9BQU8sQ0FBQztDQUN0QyxDQUFDLENBQ0g7Ozs7Ozs7O0lDakNELE1BQUc7SUFDSCxTQUFNOzs7Ozs7SUFvRE4sTUFBRztJQUNILFNBQU07SUFDTixPQUFJOzs7Ozs7Ozs7O0FDN0ROLE1Bb0ZhLHdCQUF3Qjs7Ozs7Ozs7SUF5RG5DLFlBQytCLFVBQVUsRUFDL0IsU0FBMEIsRUFDMUIsY0FBMEIsRUFDMUIsUUFBbUIsRUFDbkIsTUFBYztRQUpPLGVBQVUsR0FBVixVQUFVLENBQUE7UUFDL0IsY0FBUyxHQUFULFNBQVMsQ0FBaUI7UUFDMUIsbUJBQWMsR0FBZCxjQUFjLENBQVk7UUFDMUIsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQUNuQixXQUFNLEdBQU4sTUFBTSxDQUFRO1FBL0N4QixpQkFBWSxHQUFHLElBQUksQ0FBQztRQUdwQixhQUFRLEdBQUcsS0FBSyxDQUFDO1FBR2pCLGdCQUFXLEdBQUcsS0FBSyxDQUFDO1FBR3BCLGVBQVUsR0FBRyxLQUFLLENBQUM7UUFHbkIsdUJBQWtCLEdBQUcsS0FBSyxDQUFDO1FBSTNCLFdBQU0sR0FBRyxLQUFLLENBQUM7UUFHZix3QkFBbUIsR0FBRyxJQUFJLFlBQVksRUFBTyxDQUFDO1FBRzlDLFdBQU0sR0FBRyxJQUFJLFlBQVksRUFBTyxDQUFDO1FBR2pDLGlCQUFZLEdBQUcsSUFBSSxZQUFZLEVBQU8sQ0FBQztRQUd2QyxtQkFBYyxHQUFHLElBQUksWUFBWSxFQUFPLENBQUM7UUFHekMscUJBQWdCLEdBQUcsSUFBSSxZQUFZLEVBQVEsQ0FBQztRQUc1QyxtQkFBYyxHQUFHLElBQUksWUFBWSxFQUFjLENBQUM7UUFFeEMsY0FBUyxHQUFHLElBQUksR0FBRyxFQUErQixDQUFDO1FBRW5ELG9CQUFlLEdBQUcsSUFBSSxlQUFlLENBQWEsRUFBRSxDQUFDLENBQUM7UUFDdEQsaUJBQVksR0FBRyxJQUFJLE9BQU8sRUFBZ0IsQ0FBQztRQUMzQyxhQUFRLEdBQUcsSUFBSSxPQUFPLEVBQVEsQ0FBQztLQVFuQzs7OztJQUVKLGVBQWU7UUFDYixJQUFJLGlCQUFpQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUN0QyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDO1lBRTlDLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxDQUFDO1lBRWhDLElBQUksQ0FBQyw0QkFBNEIsRUFBRSxDQUFDO1lBQ3BDLElBQUksQ0FBQywyQkFBMkIsRUFBRSxDQUFDO1lBQ25DLElBQUksQ0FBQyx1QkFBdUIsRUFBRSxDQUFDOzs7O2tCQUt6QixRQUFRLEdBQUcsU0FBUyxDQUFnQixNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUMsSUFBSSxDQUMvRCxpQkFBaUIsRUFBRSxFQUNuQixLQUFLLEVBQUUsQ0FDUjs7a0JBRUssTUFBTSxHQUFHLFNBQVMsQ0FBZ0IsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FDM0QsaUJBQWlCLEVBQUUsRUFDbkIsS0FBSyxFQUFFLENBQ1I7O2tCQUVLLFFBQVEsR0FBRyxTQUFTLENBQWEsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FDNUQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQzVCLEdBQUcsQ0FBQyxNQUFNLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxFQUM1QixLQUFLLEVBQUUsQ0FDUjs7a0JBRUssVUFBVSxHQUFHLFNBQVMsQ0FBYSxNQUFNLEVBQUUsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUNoRSxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFDNUIsS0FBSyxFQUFFLENBQ1I7O2tCQUVLLFVBQVUsR0FBRyxTQUFTLENBQWEsSUFBSSxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQ25FLE1BQU0sQ0FBQyxLQUFLLElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUM7WUFDbkMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQzVCLEdBQUcsQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUN0QyxLQUFLLEVBQUUsQ0FDUjs7a0JBRUssU0FBUyxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQy9CLE1BQU0sQ0FBQyxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQ3hELE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUM5QixNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsRUFDL0IsU0FBUyxDQUFDLE1BQU0sVUFBVSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUNyRCxLQUFLLEVBQUUsQ0FDUjs7a0JBRUsscUJBQXFCLEdBQThCLFVBQVUsQ0FBQyxJQUFJLENBQ3RFLEdBQUcsQ0FBQyxDQUFDLEtBQWlCLEtBQUssd0JBQXdCLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUN2RTs7a0JBRUssS0FBSyxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDOztrQkFDaEMsS0FBSyxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDOztrQkFDL0IsUUFBUSxHQUFHLEtBQUssQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7O2tCQUUzRCxVQUFVLEdBQUcsYUFBYSxDQUFDLFNBQVMsRUFBRSxRQUFRLEVBQUUscUJBQXFCLENBQUMsQ0FBQyxJQUFJLENBQy9FLGVBQWUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQzFCLEtBQUssRUFBRSxDQUNSO1lBRUQsSUFBSSxDQUFDLGlCQUFpQixHQUFHLEtBQUssQ0FBQyxTQUFTLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQ3hFLFNBQVMsQ0FBQyxVQUFVLENBQUMsRUFDckIsY0FBYyxDQUFDLFVBQVUsQ0FBQyxFQUMxQixHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxTQUFTLENBQUM7Z0JBQ3JCLE9BQU87b0JBQ0wsWUFBWSxFQUFFLGNBQWMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLENBQUM7b0JBQzNGLGNBQWMsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQztpQkFDMUQsQ0FBQzthQUNILENBQUMsRUFDRixvQkFBb0IsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQ3hFLENBQUM7O2tCQUVJLGdCQUFnQixHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQ3JDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUNoQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsRUFDOUIsTUFBTSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsaUJBQWlCLENBQUMsS0FBSyxDQUFDLENBQUMsRUFDOUMsU0FBUyxDQUFDLENBQUMsSUFBSSxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsRUFDdEMsTUFBTSxDQUNKLEtBQUssSUFDSCxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDO2dCQUNuRixJQUFJLENBQUMsU0FBUyxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxDQUM1QyxDQUNGOztrQkFFSyxhQUFhLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FDbkMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxFQUNyQixjQUFjLENBQUMsVUFBVSxFQUFFLENBQUMsU0FBUyxFQUFFLEtBQWlCLE1BQU07Z0JBQzVELFNBQVM7Z0JBQ1QsS0FBSzthQUNOLENBQUMsQ0FBQyxFQUNILE1BQU0sQ0FBQyxNQUFNLElBQUksQ0FBQyxZQUFZLENBQUMsRUFDL0IsTUFBTSxDQUFDLENBQUMsRUFBRSxTQUFTLEVBQUUsS0FBSyxjQUFjLENBQUMsU0FBUyxDQUFDLENBQUMsRUFDcEQsR0FBRyxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsS0FBSyxLQUFLLENBQUMsQ0FDMUI7O2tCQUVLLHNCQUFzQixHQUFHLEtBQUssQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUN6RCxTQUFTLENBQUMsVUFBVSxDQUFDLEVBQ3JCLG9CQUFvQixDQUFDLFVBQVUsQ0FBQyxFQUNoQyxHQUFHLENBQUMsS0FBSztnQkFDUCxJQUFJLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLENBQUMsRUFBRTtvQkFDcEMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztpQkFDeEI7cUJBQU07b0JBQ0wsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO2lCQUNwQjthQUNGLENBQUMsQ0FDSDtZQUVELEtBQUssQ0FBQyxnQkFBZ0IsRUFBRSxhQUFhLEVBQUUsc0JBQXNCLENBQUM7aUJBQzNELElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2lCQUM5QixTQUFTLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUVoRCxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FDckMsR0FBRyxDQUFDLFNBQVMsS0FBSztnQkFDaEIsR0FBRyxFQUFFLEdBQUcsU0FBUyxDQUFDLEdBQUcsSUFBSTtnQkFDekIsSUFBSSxFQUFFLEdBQUcsU0FBUyxDQUFDLElBQUksSUFBSTtnQkFDM0IsS0FBSyxFQUFFLEdBQUcsU0FBUyxDQUFDLEtBQUssSUFBSTtnQkFDN0IsTUFBTSxFQUFFLEdBQUcsU0FBUyxDQUFDLE1BQU0sSUFBSTtnQkFDL0IsT0FBTyxFQUFFLFNBQVMsQ0FBQyxPQUFPO2FBQzNCLENBQUMsQ0FBQyxDQUNKLENBQUM7WUFFRixJQUFJLENBQUMscUJBQXFCLENBQUMsVUFBVSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1NBQ2xEO0tBQ0Y7Ozs7SUFFRCxTQUFTO1FBQ1AsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxJQUFJO1lBQ2hDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDeEIsQ0FBQyxDQUFDO0tBQ0o7Ozs7OztJQUVELFdBQVcsQ0FBSSxTQUF5QjtRQUN0QyxJQUFJLENBQUMsc0JBQXNCLENBQUMsU0FBUyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBeUIsS0FBSyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7S0FDekc7Ozs7OztJQUVELFdBQVcsQ0FBSSxTQUF5QjtRQUN0QyxJQUFJLENBQUMsc0JBQXNCLENBQUMsU0FBUyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBeUIsS0FBSyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7S0FDekc7Ozs7OztJQUVELGFBQWEsQ0FBSSxTQUF5QjtRQUN4QyxJQUFJLENBQUMsc0JBQXNCLENBQUMsU0FBUyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBeUIsS0FBSyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7S0FDM0c7Ozs7SUFFRCxjQUFjO1FBQ1osSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxJQUFJO1lBQ2hDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDMUIsQ0FBQyxDQUFDO0tBQ0o7Ozs7SUFFRCxNQUFNO1FBQ0osSUFBSSxDQUFDLDRCQUE0QixFQUFFLENBQUM7UUFDcEMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLDJCQUEyQixFQUFFLENBQUMsQ0FBQztLQUMzRTs7OztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUM7S0FDMUI7Ozs7OztJQUVPLHNCQUFzQixDQUFJLFNBQXlCOzs7O1FBSXpELE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLFNBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQzFGOzs7O0lBRU8sd0JBQXdCO1FBQzlCLElBQUksQ0FBQyxlQUFlO2FBQ2pCLElBQUksQ0FDSCxTQUFTLENBQUMsVUFBVSxDQUFDLEVBQ3JCLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQ3pCO2FBQ0EsU0FBUyxDQUFDO1lBQ1QsSUFBSSxFQUFFLGFBQWE7Z0JBQ2pCLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7Z0JBQzdDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO2FBQ2pDO1lBQ0QsUUFBUSxFQUFFO2dCQUNSLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7YUFDbkM7U0FDRixDQUFDLENBQUM7S0FDTjs7OztJQUVPLHVCQUF1Qjs7UUFFN0IsSUFBSSxDQUFDLFlBQVk7YUFDZCxJQUFJLENBQ0gsY0FBYyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsRUFDcEMsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FDekI7YUFDQSxTQUFTLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxhQUFhLENBQXdCOztrQkFDbEQsSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJO1lBRXhCLFFBQVEsTUFBTSxDQUFDLElBQUk7Z0JBQ2pCLEtBQUssYUFBYSxDQUFDLEdBQUc7b0JBQ3BCLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsYUFBYSxDQUFDLEVBQUU7d0JBQ3RDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztxQkFDaEI7b0JBQ0QsTUFBTTtnQkFDUixLQUFLLGFBQWEsQ0FBQyxNQUFNO29CQUN2QixJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLGFBQWEsQ0FBQyxFQUFFO3dCQUN6QyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7cUJBQ2xCO29CQUNELE1BQU07YUFDVDtTQUNGLENBQUMsQ0FBQzs7UUFHTCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTzthQUMxQixJQUFJLENBQ0gsY0FBYyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsRUFDcEMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxFQUN6QixTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUN6QjthQUNBLFNBQVMsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLGFBQWEsQ0FBMEM7O2tCQUNuRSxPQUFPLEdBQUcsS0FBSyxDQUFDLE9BQU8sRUFBRTs7a0JBQ3pCLFlBQVksR0FBRyxhQUFhLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBRWhGLElBQUksWUFBWSxDQUFDLE1BQU0sRUFBRTtnQkFDdkIsWUFBWSxDQUFDLE9BQU8sQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsYUFBYSxDQUFDLENBQUMsQ0FBQzthQUNyRTtZQUVELElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztTQUNmLENBQUMsQ0FBQztLQUNOOzs7O0lBRU8sMkJBQTJCO1FBQ2pDLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUM7O2tCQUN0QixPQUFPLEdBQUcsU0FBUyxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUM7O2tCQUNyQyxhQUFhLEdBQUcsU0FBUyxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUM7O2tCQUMzQyxnQkFBZ0IsR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxRQUFRLENBQUM7WUFFdkQsS0FBSyxDQUFDLE9BQU8sRUFBRSxhQUFhLEVBQUUsZ0JBQWdCLENBQUM7aUJBQzVDLElBQUksQ0FDSCxTQUFTLENBQUMsZ0JBQWdCLENBQUMsRUFDM0IsU0FBUyxDQUFDLFVBQVUsQ0FBQyxFQUNyQixTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUN6QjtpQkFDQSxTQUFTLENBQUM7Z0JBQ1QsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO2FBQ2YsQ0FBQyxDQUFDO1NBQ04sQ0FBQyxDQUFDO0tBQ0o7Ozs7OztJQUVPLHFCQUFxQixDQUFDLFVBQWtDLEVBQUUsUUFBZ0M7UUFDaEcsVUFBVTthQUNQLElBQUksQ0FDSCxNQUFNLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUM5QyxHQUFHLENBQUMsTUFBTSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLENBQUMsRUFDdkMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxFQUNuQyxjQUFjLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxFQUNwQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxLQUFLLEtBQUssQ0FBQyxFQUN6QixTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUN6QjthQUNBLFNBQVMsQ0FBQyxLQUFLO1lBQ2QsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDakMsQ0FBQyxDQUFDO0tBQ047Ozs7SUFFTyw0QkFBNEI7UUFDbEMsSUFBSSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsR0FBRywyQkFBMkIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDdkU7Ozs7O0lBRU8saUJBQWlCLENBQUMsS0FBaUI7UUFDekMsT0FBTyxtQkFBbUIsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQzlDOzs7O0lBRU8sVUFBVTtRQUNoQixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDbkIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxlQUFlLENBQUMsQ0FBQztLQUMzRDs7Ozs7SUFFTyxZQUFZLENBQUMsS0FBaUI7UUFDcEMsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDM0QsT0FBTztTQUNSO1FBRUQsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRXZCLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ3JCLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsZUFBZSxDQUFDLENBQUM7U0FDeEQ7O2NBRUssVUFBVSxHQUFHLGdCQUFnQixDQUFDLEtBQUssQ0FBQztRQUUxQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLEtBQUs7O2tCQUNsQyxRQUFRLEdBQUcsSUFBSSxDQUFDLHFCQUFxQixFQUFFOztrQkFDdkMsaUJBQWlCLEdBQUcsYUFBYSxDQUFDLFVBQVUsRUFBRSxRQUFRLENBQUM7WUFFN0QsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLHlCQUF5QixDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUNuRCxPQUFPO2FBQ1I7O2tCQUVLLFNBQVMsR0FDYixDQUFDLGlCQUFpQjtnQkFDaEIsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQztnQkFDdkMsQ0FBQyxJQUFJLENBQUMsVUFBVTtnQkFDaEIsQ0FBQyxJQUFJLENBQUMsa0JBQWtCO2lCQUN6QixpQkFBaUIsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztpQkFDOUUsQ0FBQyxpQkFBaUIsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUM7aUJBQzlFLGlCQUFpQixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDO2lCQUN2RCxDQUFDLGlCQUFpQixJQUFJLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQzs7a0JBRXBELFlBQVksR0FDaEIsQ0FBQyxDQUFDLGlCQUFpQjtnQkFDakIsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQztnQkFDdkMsQ0FBQyxJQUFJLENBQUMsVUFBVTtnQkFDaEIsQ0FBQyxJQUFJLENBQUMsa0JBQWtCO2lCQUN6QixDQUFDLGlCQUFpQixJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO2lCQUMvRSxpQkFBaUIsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUM7aUJBQzdFLENBQUMsaUJBQWlCLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUM7aUJBQ3hELGlCQUFpQixJQUFJLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQztZQUV6RCxJQUFJLFNBQVMsRUFBRTtnQkFDYixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ3hCO2lCQUFNLElBQUksWUFBWSxFQUFFO2dCQUN2QixJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQzFCO1NBQ0YsQ0FBQyxDQUFDO0tBQ0o7Ozs7O0lBRU8sWUFBWSxDQUFDLEtBQVk7O2NBQ3pCLFlBQVksR0FBRywyQkFBMkIsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQztRQUUvRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLElBQUk7WUFDaEMsSUFBSSxJQUFJLENBQUMsb0JBQW9CLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQ3BDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxZQUFZLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO2FBQ3hEO2lCQUFNO2dCQUNMLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxZQUFZLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO2FBQ3REO1NBQ0YsQ0FBQyxDQUFDO0tBQ0o7Ozs7O0lBRU8sb0JBQW9CLENBQUMsS0FBWTtRQUN2QyxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMseUJBQXlCLENBQUMsS0FBSyxDQUFDLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQztLQUM3RTs7Ozs7OztJQUVPLG9CQUFvQixDQUFDLFNBQVMsRUFBRSxJQUF5QixFQUFFLEtBQVk7O2NBQ3ZFLFdBQVcsR0FBRyxhQUFhLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxDQUFDOztjQUVwRSxTQUFTLEdBQUcsV0FBVyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsbUJBQW1CLENBQUMsS0FBSyxDQUFDOztjQUV2RixZQUFZLEdBQ2hCLENBQUMsQ0FBQyxXQUFXLElBQUksSUFBSSxDQUFDLFFBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQzthQUN0RSxXQUFXLElBQUksSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRTdFLElBQUksU0FBUyxFQUFFO1lBQ2IsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUN4QjthQUFNLElBQUksWUFBWSxFQUFFO1lBQ3ZCLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDMUI7S0FDRjs7Ozs7OztJQUVPLHNCQUFzQixDQUFDLFNBQVMsRUFBRSxJQUF5QixFQUFFLEtBQVk7O2NBQ3pFLFdBQVcsR0FBRyxhQUFhLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxDQUFDOztjQUVwRSxTQUFTLEdBQ2IsQ0FBQyxXQUFXLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQzthQUN4RyxXQUFXLElBQUksSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7O2NBRXBHLFlBQVksR0FDaEIsQ0FBQyxDQUFDLFdBQVcsSUFBSSxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQzthQUNqRyxDQUFDLFdBQVcsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUUzRyxJQUFJLFNBQVMsRUFBRTtZQUNiLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFNBQVMsRUFBRSxHQUFHLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQzs7a0JBRTVDLE1BQU0sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQztrQkFDcEQsTUFBTSxDQUFDLE1BQU07a0JBQ2IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDO3NCQUNwQyxNQUFNLENBQUMsR0FBRztzQkFDVixNQUFNLENBQUMsSUFBSTtZQUVmLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztTQUNsQzthQUFNLElBQUksWUFBWSxFQUFFO1lBQ3ZCLElBQUksQ0FBQyxTQUFTLENBQUMsbUJBQW1CLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sRUFBRSxHQUFHLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUM5RSxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUM3QjtLQUNGOzs7O0lBRU8sV0FBVztRQUNqQixJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sRUFBRSxJQUFJO1lBQ2xDLElBQUksTUFBTSxLQUFLLE1BQU0sQ0FBQyxHQUFHLEVBQUU7Z0JBQ3pCLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDeEI7WUFFRCxJQUFJLE1BQU0sS0FBSyxNQUFNLENBQUMsTUFBTSxFQUFFO2dCQUM1QixJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQzFCO1NBQ0YsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztLQUN4Qjs7Ozs7O0lBRU8sUUFBUSxDQUFDLElBQXlCLEVBQUUsYUFBeUI7O1lBQy9ELE9BQU8sR0FBRyxLQUFLO1FBRW5CLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxhQUFhLENBQUMsRUFBRTtZQUN2QyxPQUFPLEdBQUcsSUFBSSxDQUFDO1lBQ2YsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDL0IsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDekMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3BDO1FBRUQsT0FBTyxPQUFPLENBQUM7S0FDaEI7Ozs7OztJQUVPLFdBQVcsQ0FBQyxJQUF5QixFQUFFLGFBQXlCOztZQUNsRSxPQUFPLEdBQUcsS0FBSzs7Y0FDYixLQUFLLEdBQUcsSUFBSSxZQUFZLG1CQUFtQixHQUFHLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSTs7Y0FDL0QsS0FBSyxHQUFHLGFBQWEsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDO1FBRTFDLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQyxFQUFFO1lBQ2QsT0FBTyxHQUFHLElBQUksQ0FBQztZQUNmLGFBQWEsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQy9CLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBQ3pDLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUN0QztRQUVELE9BQU8sT0FBTyxDQUFDO0tBQ2hCOzs7OztJQUVPLFdBQVcsQ0FBQyxJQUF5QjtRQUMzQyxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDakIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUMxQjthQUFNO1lBQ0wsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUN4QjtLQUNGOzs7OztJQUVPLFdBQVcsQ0FBQyxJQUF5QjtRQUMzQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxhQUFhLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7S0FDM0Q7Ozs7O0lBRU8sYUFBYSxDQUFDLElBQXlCO1FBQzdDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLGFBQWEsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztLQUM5RDs7Ozs7O0lBRU8sUUFBUSxDQUFDLElBQXlCLEVBQUUsYUFBeUI7UUFDbkUsT0FBTyxhQUFhLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUMzQzs7O1lBNWdCRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLHNCQUFzQjtnQkFDaEMsUUFBUSxFQUFFLHNCQUFzQjtnQkFDaEMsSUFBSSxFQUFFO29CQUNKLEtBQUssRUFBRSxzQkFBc0I7aUJBQzlCO2dCQUNELFFBQVEsRUFBRTs7Ozs7Ozs7R0FRVDs7YUFFRjs7Ozs0Q0EyREksTUFBTSxTQUFDLFdBQVc7WUF0R2QsZUFBZTtZQXRDdEIsVUFBVTtZQUtWLFNBQVM7WUFFVCxNQUFNOzs7eUJBZ0ZMLFNBQVMsU0FBQyxXQUFXOytCQUdyQixlQUFlLFNBQUMsbUJBQW1CLEVBQUUsRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFOzRCQUcxRCxLQUFLOzJCQUdMLEtBQUs7dUJBR0wsS0FBSzswQkFHTCxLQUFLO3lCQUdMLEtBQUs7aUNBR0wsS0FBSztxQkFHTCxLQUFLLFlBQ0wsV0FBVyxTQUFDLGtCQUFrQjtrQ0FHOUIsTUFBTTtxQkFHTixNQUFNOzJCQUdOLE1BQU07NkJBR04sTUFBTTsrQkFHTixNQUFNOzZCQUdOLE1BQU07Ozs7Ozs7O0FDbElULE1BQWEsY0FBYyxHQUF1QjtJQUNoRCxhQUFhLEVBQUUsVUFBVTtJQUN6QixTQUFTLEVBQUU7UUFDVCxnQkFBZ0IsRUFBRSxLQUFLO1FBQ3ZCLGdCQUFnQixFQUFFLE1BQU07UUFDeEIsY0FBYyxFQUFFLE9BQU87UUFDdkIsbUJBQW1CLEVBQUUsWUFBWTtLQUNsQztDQUNGOzs7Ozs7QUNWRDtNQVdNLFVBQVUsR0FBRyxDQUFDLHdCQUF3QixFQUFFLG1CQUFtQixDQUFDOzs7OztBQUVsRSxTQUFnQixjQUFjLENBQUMsTUFBbUM7SUFDaEUsT0FBTyxTQUFTLENBQUMsY0FBYyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0NBQzFDO0FBT0QsTUFBYSxrQkFBa0I7Ozs7O0lBQzdCLE9BQU8sT0FBTyxDQUFDLFNBQXNDLEVBQUU7UUFDckQsT0FBTztZQUNMLFFBQVEsRUFBRSxrQkFBa0I7WUFDNUIsU0FBUyxFQUFFO2dCQUNULGVBQWU7Z0JBQ2YsRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUU7Z0JBQzFDO29CQUNFLE9BQU8sRUFBRSxNQUFNO29CQUNmLFVBQVUsRUFBRSxjQUFjO29CQUMxQixJQUFJLEVBQUUsQ0FBQyxXQUFXLENBQUM7aUJBQ3BCO2FBQ0Y7U0FDRixDQUFDO0tBQ0g7OztZQW5CRixRQUFRLFNBQUM7Z0JBQ1IsT0FBTyxFQUFFLENBQUMsWUFBWSxDQUFDO2dCQUN2QixZQUFZLEVBQUUsQ0FBQyxHQUFHLFVBQVUsQ0FBQztnQkFDN0IsT0FBTyxFQUFFLENBQUMsR0FBRyxVQUFVLENBQUM7YUFDekI7Ozs7Ozs7Ozs7Ozs7OzsifQ==